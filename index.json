{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PnP Core SDK API documentation | PnP Core SDK",
    "keywords": "PnP Core SDK API documentation Welcome to the API documentation of the PnP Core SDK. If you want to browse our API, in the left side navigation you can filter by namespace. If you're looking for a particular class, it's easier to use the filter and simply type the class name. Note This documentation is auto generated based on the public API surface and code comments (triple slash comments). If you like to submit any changes or to fix any typos, please create a PR against the respective source files with updated code comments. Community rocks!"
  },
  "api/PnP.Core.BaseError.html": {
    "href": "api/PnP.Core.BaseError.html",
    "title": "Class BaseError | PnP Core SDK",
    "keywords": "Class BaseError Base error information Inheritance Object BaseError ClientError ServiceError Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class BaseError Constructors BaseError(ErrorType) Declaration public BaseError(ErrorType type) Parameters ErrorType type Properties AdditionalData Additional data linked to an error Declaration public IDictionary<string, object> AdditionalData { get; } Property Value IDictionary < String , Object > PnPCorrelationId Correlation for a PnP Core SDK operation Declaration public Guid PnPCorrelationId { get; } Property Value Guid Type ErrorType of the error Declaration public ErrorType Type { get; } Property Value ErrorType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ClientError.html": {
    "href": "api/PnP.Core.ClientError.html",
    "title": "Class ClientError | PnP Core SDK",
    "keywords": "Class ClientError Information about the client error Inheritance Object BaseError ClientError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientError : BaseError Constructors ClientError(ErrorType, String) Declaration public ClientError(ErrorType type, string message) Parameters ErrorType type String message Properties Message Error message that was linked to the client error Declaration public string Message { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ClientException.html": {
    "href": "api/PnP.Core.ClientException.html",
    "title": "Class ClientException | PnP Core SDK",
    "keywords": "Class ClientException PnP Client exception Inheritance Object Exception PnPException ClientException Inherited Members PnPException.Error Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientException : PnPException, ISerializable Constructors ClientException(ErrorType, String) Declaration public ClientException(ErrorType type, string message) Parameters ErrorType type String message ClientException(ErrorType, String, Exception) Declaration public ClientException(ErrorType type, string message, Exception innerException) Parameters ErrorType type String message Exception innerException Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ErrorType.html": {
    "href": "api/PnP.Core.ErrorType.html",
    "title": "Enum ErrorType | PnP Core SDK",
    "keywords": "Enum ErrorType List of possible errors that can be thrown Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public enum ErrorType CollectionNotLoaded ConfigurationError GraphBetaNotAllowed GraphServiceError InstanceWasDeleted LinqError MissingAddApiHandler ModelMetadataIncorrect OfflineDataError PropertyNotLoaded SharePointRestServiceError Unsupported Extension Methods DataModelExtensions.IsPropertyAvailable<ErrorType>(Expression<Func<ErrorType, Object>>)"
  },
  "api/PnP.Core.html": {
    "href": "api/PnP.Core.html",
    "title": "Namespace PnP.Core | PnP Core SDK",
    "keywords": "Namespace PnP.Core Classes BaseError Base error information ClientError Information about the client error ClientException PnP Client exception MicrosoftGraphError Microsoft Graph service error MicrosoftGraphServiceException Microsoft Graph Service exception PnPConstants Support class to provide all the constants for the engine PnPException Base class for the pnp core sdk exceptions ServiceError Error information for a service error ServiceException Abstract class representing service errors SharePointRestError SharePoint Rest service error SharePointRestServiceException Microsoft Graph Service exception Enums ErrorType List of possible errors that can be thrown"
  },
  "api/PnP.Core.MicrosoftGraphError.html": {
    "href": "api/PnP.Core.MicrosoftGraphError.html",
    "title": "Class MicrosoftGraphError | PnP Core SDK",
    "keywords": "Class MicrosoftGraphError Microsoft Graph service error Inheritance Object BaseError ServiceError MicrosoftGraphError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code ServiceError.AddAdditionalData(String, Object) BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphError : ServiceError Constructors MicrosoftGraphError(ErrorType, Int32, String) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response String holding the information about the failed request MicrosoftGraphError(ErrorType, Int32, JsonElement) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed JsonElement error JsonElement holding the json data of the service error Methods ToString() Outputs a MicrosoftGraphError to a string representation Declaration public override string ToString() Returns String String representation Overrides Object.ToString() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.MicrosoftGraphServiceException.html": {
    "href": "api/PnP.Core.MicrosoftGraphServiceException.html",
    "title": "Class MicrosoftGraphServiceException | PnP Core SDK",
    "keywords": "Class MicrosoftGraphServiceException Microsoft Graph Service exception Inheritance Object Exception PnPException ServiceException MicrosoftGraphServiceException Inherited Members PnPException.Error Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphServiceException : ServiceException, ISerializable Constructors MicrosoftGraphServiceException(ErrorType, Int32, String) Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type Int32 httpResponseCode String response MicrosoftGraphServiceException(ErrorType, Int32, JsonElement) Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type Int32 httpResponseCode JsonElement error Methods ToString() Outputs a MicrosoftGraphServiceException to a string representation Declaration public override string ToString() Returns String String representation Overrides Exception.ToString() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.AzureActiveDirectory.html": {
    "href": "api/PnP.Core.Model.AzureActiveDirectory.html",
    "title": "Namespace PnP.Core.Model.AzureActiveDirectory | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.AzureActiveDirectory Interfaces IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. IUser Public interface to define a User of Azure Active Directory IUserCollection Public interface to define a collection of Users of Azure Active Directory"
  },
  "api/PnP.Core.Model.AzureActiveDirectory.IIdentity.html": {
    "href": "api/PnP.Core.Model.AzureActiveDirectory.IIdentity.html",
    "title": "Interface IIdentity | PnP Core SDK",
    "keywords": "Interface IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. Namespace : PnP.Core.Model.AzureActiveDirectory Assembly : PnP.Core.dll Syntax public interface IIdentity : IComplexType Properties DisplayName The identity's display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won't show up as having changed when using delta. Declaration string DisplayName { get; set; } Property Value String Id Unique identifier for the identity. Declaration string Id { get; set; } Property Value String TenantId Unique identity of the tenant (optional). Declaration string TenantId { get; set; } Property Value String UserIdentityType In case the identity is a user this property contains the user type of the user Declaration string UserIdentityType { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.AzureActiveDirectory.IUser.html": {
    "href": "api/PnP.Core.Model.AzureActiveDirectory.IUser.html",
    "title": "Interface IUser | PnP Core SDK",
    "keywords": "Interface IUser Public interface to define a User of Azure Active Directory Inherited Members IDataModel<IUser>.GetAsync(Expression<Func<IUser, Object>>[]) IDataModel<IUser>.Get(Batch, Expression<Func<IUser, Object>>[]) IDataModel<IUser>.Get(Expression<Func<IUser, Object>>[]) IDataModel<IUser>.HasValue(String) IDataModel<IUser>.HasChanged(String) IDataModel<IUser>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IUser>.GetAsync(ApiResponse, Expression<Func<IUser, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.AzureActiveDirectory Assembly : PnP.Core.dll Syntax public interface IUser : IDataModel<IUser>, IDataModelParent, IDataModelWithContext, IDataModelGet<IUser>, IDataModelGet Properties Department Declaration string Department { get; set; } Property Value String DisplayName Declaration string DisplayName { get; set; } Property Value String Id Declaration string Id { get; set; } Property Value String Mail Declaration string Mail { get; set; } Property Value String MailNickname Declaration string MailNickname { get; set; } Property Value String OfficeLocation Declaration string OfficeLocation { get; set; } Property Value String UserPrincipalName Declaration string UserPrincipalName { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.AzureActiveDirectory.IUserCollection.html": {
    "href": "api/PnP.Core.Model.AzureActiveDirectory.IUserCollection.html",
    "title": "Interface IUserCollection | PnP Core SDK",
    "keywords": "Interface IUserCollection Public interface to define a collection of Users of Azure Active Directory Inherited Members IEnumerable<IUser>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.AzureActiveDirectory Assembly : PnP.Core.dll Syntax public interface IUserCollection : IDataModelCollection<IUser>, IEnumerable<IUser>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.DataModelExtensions.html": {
    "href": "api/PnP.Core.Model.DataModelExtensions.html",
    "title": "Class DataModelExtensions | PnP Core SDK",
    "keywords": "Class DataModelExtensions Data model extension methods for public use Inheritance Object DataModelExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class DataModelExtensions Methods EnsureParentObjectAsync(IDataModelParent) Ensures the basic properties (mainly IDs) of the parent of the current domain model object Declaration public static Task EnsureParentObjectAsync(this IDataModelParent model) Parameters IDataModelParent model The domain model to which we have to ensure the parent Returns Task EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) Checks if the requested properties are loaded for the given model, if not they're loaded via a GetAsync call Declaration public static Task EnsurePropertiesAsync<TModel>(this IDataModel<TModel> model, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModel <TModel> model Implementation of the model (e.g. Web) Expression < Func <TModel, Object >>[] expressions Expressions listing the properties to load Returns Task Type Parameters TModel Model type (e.g. IWeb) IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) Checks if a property is loaded or not on a complex type Declaration public static bool IsPropertyAvailable<TModel>(this TModel model, Expression<Func<TModel, object>> expression) Parameters TModel model Implementation of the model (e.g. TeamFunSettings) Expression < Func <TModel, Object >> expression Expression listing the property to load Returns Boolean True if property was loaded, false otherwise Type Parameters TModel Model type (e.g. ITeamFunSettings) IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) Checks if a property is loaded or not Declaration public static bool IsPropertyAvailable<TModel>(this IDataModel<TModel> model, Expression<Func<TModel, object>> expression) Parameters IDataModel <TModel> model Implementation of the model (e.g. Web) Expression < Func <TModel, Object >> expression Expression listing the property to load Returns Boolean True if property was loaded, false otherwise Type Parameters TModel Model type (e.g. IWeb)"
  },
  "api/PnP.Core.Model.html": {
    "href": "api/PnP.Core.Model.html",
    "title": "Namespace PnP.Core.Model | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model Classes DataModelExtensions Data model extension methods for public use TransientDictionary Class tracks Dictionary changes TypeExtensions Extensions to the Type class Interfaces IComplexType IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects IDataModelDelete Defines the delete interface for Domain Model objects that need delete. IDataModelGet Defines the basic untyped read interface for Domain Model objects that can be read. IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request IDataModelParent Interface to implement parent concept on all model objects IDataModelUpdate Defines the update interface for Domain Model objects that need update. IDataModelWithContext Interface to implement PnPContext concept on all model objects IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key IExpandoDataModel Public interface to define an object extensible through a dictionary of metadata properties IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system ISupportPaging Paged data retrieval can be done using the methods provided via this interface"
  },
  "api/PnP.Core.Model.IComplexType.html": {
    "href": "api/PnP.Core.Model.IComplexType.html",
    "title": "Interface IComplexType | PnP Core SDK",
    "keywords": "Interface IComplexType Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IComplexType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModel-1.html": {
    "href": "api/PnP.Core.Model.IDataModel-1.html",
    "title": "Interface IDataModel<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<TModel>.GetAsync(ApiResponse, Expression<Func<TModel, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModel<TModel> : IDataModelParent, IDataModelWithContext, IDataModelGet<TModel>, IDataModelGet Type Parameters TModel The actual type of the Domain Model object Properties Requested Was this model requested from the back-end Declaration bool Requested { get; set; } Property Value Boolean Methods Get(Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel Get(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object Get(Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel Get(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object GetAsync(Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object HasChanged(String) Checks if a property on this model object has changed Declaration bool HasChanged(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if changed, false otherwise HasValue(String) Checks if a property on this model object has a value set Declaration bool HasValue(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if set, false otherwise Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.IDataModelCollection-1.html": {
    "href": "api/PnP.Core.Model.IDataModelCollection-1.html",
    "title": "Interface IDataModelCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects Inherited Members IEnumerable<TModel>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollection<TModel> : IEnumerable<TModel>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection Type Parameters TModel The actual type of the Domain Model objects Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.IDataModelDelete.html": {
    "href": "api/PnP.Core.Model.IDataModelDelete.html",
    "title": "Interface IDataModelDelete | PnP Core SDK",
    "keywords": "Interface IDataModelDelete Defines the delete interface for Domain Model objects that need delete. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelDelete Methods Delete() Collects the request to delete a Domain Model object into the remote data source Declaration void Delete() Delete(Batch) Collects the request to delete a Domain Model object into the remote data source using a batch Declaration void Delete(Batch batch) Parameters Batch batch Batch add this request to DeleteAsync() Deletes a Domain Model object into the remote data source Declaration Task DeleteAsync() Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelGet.html": {
    "href": "api/PnP.Core.Model.IDataModelGet.html",
    "title": "Interface IDataModelGet | PnP Core SDK",
    "keywords": "Interface IDataModelGet Defines the basic untyped read interface for Domain Model objects that can be read. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelGet Methods Get(Batch, Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration object Get(Batch batch, params Expression<Func<object, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object Get(Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration object Get(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration Task<object> GetAsync(ApiResponse apiResponse, params Expression<Func<object, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object GetAsync(Expression<Func<Object, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<object> GetAsync(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelGet-1.html": {
    "href": "api/PnP.Core.Model.IDataModelGet-1.html",
    "title": "Interface IDataModelGet<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. Inherited Members IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelGet<TModel> : IDataModelGet Type Parameters TModel Methods Get(Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel Get(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object Get(Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel Get(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object GetAsync(ApiResponse, Expression<Func<TModel, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration Task<TModel> GetAsync(ApiResponse apiResponse, params Expression<Func<TModel, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object GetAsync(Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelMappingHandler.html": {
    "href": "api/PnP.Core.Model.IDataModelMappingHandler.html",
    "title": "Interface IDataModelMappingHandler | PnP Core SDK",
    "keywords": "Interface IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelMappingHandler Properties MappingHandler Handler that will fire when a property mapping does cannot be done automatically Declaration Func<FromJson, object> MappingHandler { get; set; } Property Value Func < FromJson , Object > PostMappingHandler Handler that will fire after the full json to model operation was done Declaration Action<string> PostMappingHandler { get; set; } Property Value Action < String > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelParent.html": {
    "href": "api/PnP.Core.Model.IDataModelParent.html",
    "title": "Interface IDataModelParent | PnP Core SDK",
    "keywords": "Interface IDataModelParent Interface to implement parent concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelParent Properties Parent Represents the parent of the current domain model object Declaration IDataModelParent Parent { get; set; } Property Value IDataModelParent Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.IDataModelUpdate.html": {
    "href": "api/PnP.Core.Model.IDataModelUpdate.html",
    "title": "Interface IDataModelUpdate | PnP Core SDK",
    "keywords": "Interface IDataModelUpdate Defines the update interface for Domain Model objects that need update. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelUpdate Methods Update() Collects the request to update a Domain Model object into the remote data source Declaration void Update() Update(Batch) Collects the request to update a Domain Model object into the remote data source using a batch Declaration void Update(Batch batch) Parameters Batch batch Batch add this request to UpdateAsync() Updates a Domain Model object into the remote data source Declaration Task UpdateAsync() Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelWithContext.html": {
    "href": "api/PnP.Core.Model.IDataModelWithContext.html",
    "title": "Interface IDataModelWithContext | PnP Core SDK",
    "keywords": "Interface IDataModelWithContext Interface to implement PnPContext concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithContext Properties PnPContext Declaration PnPContext PnPContext { get; set; } Property Value PnPContext Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelWithKey.html": {
    "href": "api/PnP.Core.Model.IDataModelWithKey.html",
    "title": "Interface IDataModelWithKey | PnP Core SDK",
    "keywords": "Interface IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithKey Properties Key Readonly property to get the untyped key of the object Declaration object Key { get; set; } Property Value Object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IExpandoDataModel.html": {
    "href": "api/PnP.Core.Model.IExpandoDataModel.html",
    "title": "Interface IExpandoDataModel | PnP Core SDK",
    "keywords": "Interface IExpandoDataModel Public interface to define an object extensible through a dictionary of metadata properties Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IExpandoDataModel Properties Values The dictionary of metadata properties Declaration TransientDictionary Values { get; } Property Value TransientDictionary Methods ToDynamic() Transforms the current model instance into a dynamic type Declaration dynamic ToDynamic() Returns Object Dynamic version of current model instance Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IManageableCollection.html": {
    "href": "api/PnP.Core.Model.IManageableCollection.html",
    "title": "Interface IManageableCollection | PnP Core SDK",
    "keywords": "Interface IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection Methods Add(Object) Method to add a new item to the collection Declaration void Add(object item) Parameters Object item The untyped item to add AddOrUpdate(Object, Predicate<Object>) Method to add a new untyped item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(object newItem, Predicate<object> selector) Parameters Object newItem The untyped item to add Predicate < Object > selector The selection predicate for the already existing item, if any CreateNew() Method to create a new item of the collection, ready to be added to the same collection Declaration object CreateNew() Returns Object The new item, ready to be added to the current collection Remove(Object) Method to remove an untyped item from the collection Declaration bool Remove(object item) Parameters Object item The untyped item to remove Returns Boolean True if the removal is successful Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IManageableCollection-1.html": {
    "href": "api/PnP.Core.Model.IManageableCollection-1.html",
    "title": "Interface IManageableCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods Inherited Members IManageableCollection.Add(Object) IManageableCollection.AddOrUpdate(Object, Predicate<Object>) IManageableCollection.Remove(Object) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection<TModel> : IManageableCollection Type Parameters TModel Methods Add(TModel) Method to add a new item to the collection Declaration void Add(TModel item) Parameters TModel item The untyped item to add AddOrUpdate(TModel, Predicate<TModel>) Method to add a new fully typed item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(TModel newItem, Predicate<TModel> selector) Parameters TModel newItem The fully typed item to add Predicate <TModel> selector The selection predicate for the already existing item, if any CreateNew() Method to create a new typed item of the collection, ready to be added to the same collection Declaration TModel CreateNew() Returns TModel The new item, ready to be added to the current collection Remove(TModel) Method to remove an fully typed item from the collection Declaration bool Remove(TModel item) Parameters TModel item The fully typed item to remove Returns Boolean True if the removal is successful Replace(Int32, TModel) Replaces an item in the collection with a new one Declaration void Replace(int itemIndex, TModel newItem) Parameters Int32 itemIndex The index of the item to replace within the collection TModel newItem New item to replace the old one with Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IMetadataExtensible.html": {
    "href": "api/PnP.Core.Model.IMetadataExtensible.html",
    "title": "Interface IMetadataExtensible | PnP Core SDK",
    "keywords": "Interface IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IMetadataExtensible Properties Metadata Dictionary to access the domain model object Metadata Declaration Dictionary<string, string> Metadata { get; } Property Value Dictionary < String , String > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IRequestable.html": {
    "href": "api/PnP.Core.Model.IRequestable.html",
    "title": "Interface IRequestable | PnP Core SDK",
    "keywords": "Interface IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestable Properties Requested Was this object requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IRequestableCollection.html": {
    "href": "api/PnP.Core.Model.IRequestableCollection.html",
    "title": "Interface IRequestableCollection | PnP Core SDK",
    "keywords": "Interface IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestableCollection Properties Length Returns the size of the collection Declaration int Length { get; } Property Value Int32 Requested Was this collection requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean RequestedItems Represents the items already requested from the back-end service Declaration IEnumerable RequestedItems { get; } Property Value IEnumerable Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.ISupportPaging.html": {
    "href": "api/PnP.Core.Model.ISupportPaging.html",
    "title": "Interface ISupportPaging | PnP Core SDK",
    "keywords": "Interface ISupportPaging Paged data retrieval can be done using the methods provided via this interface Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface ISupportPaging Properties CanPage Determines whether paging is possible Declaration bool CanPage { get; } Property Value Boolean Methods GetAllPagesAsync() Retrieves all pages Declaration Task GetAllPagesAsync() Returns Task GetNextPageAsync() Gets the next page in a series Declaration Task GetNextPageAsync() Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.html": {
    "href": "api/PnP.Core.Model.SharePoint.html",
    "title": "Namespace PnP.Core.Model.SharePoint | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.SharePoint Interfaces IAlternateUICulture IAlternateUICultureCollection IList Public interface to define a List object of SharePoint Online IListCollection Public interface to define a collection of List objects of SharePoint Online IListItem IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online ISite Public interface to define a Site object of SharePoint Online IWeb Public interface to define a Web object of SharePoint Online IWebCollection Public interface to define a collection of Web objects of SharePoint Online Enums ListExperience ListReadingDirection ListTemplateType Enumeration to define the list template types for SharePoint SearchBoxInNavBar SearchScopes"
  },
  "api/PnP.Core.Model.SharePoint.IAlternateUICulture.html": {
    "href": "api/PnP.Core.Model.SharePoint.IAlternateUICulture.html",
    "title": "Interface IAlternateUICulture | PnP Core SDK",
    "keywords": "Interface IAlternateUICulture Inherited Members IDataModel<IAlternateUICulture>.GetAsync(Expression<Func<IAlternateUICulture, Object>>[]) IDataModel<IAlternateUICulture>.Get(Batch, Expression<Func<IAlternateUICulture, Object>>[]) IDataModel<IAlternateUICulture>.Get(Expression<Func<IAlternateUICulture, Object>>[]) IDataModel<IAlternateUICulture>.HasValue(String) IDataModel<IAlternateUICulture>.HasChanged(String) IDataModel<IAlternateUICulture>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IAlternateUICulture>.GetAsync(ApiResponse, Expression<Func<IAlternateUICulture, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IAlternateUICulture : IDataModel<IAlternateUICulture>, IDataModelParent, IDataModelWithContext, IDataModelGet<IAlternateUICulture>, IDataModelGet Properties LCID The Locale ID of a AlternateUICulture Declaration int LCID { get; set; } Property Value Int32 Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IAlternateUICultureCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IAlternateUICultureCollection.html",
    "title": "Interface IAlternateUICultureCollection | PnP Core SDK",
    "keywords": "Interface IAlternateUICultureCollection Inherited Members IEnumerable<IAlternateUICulture>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IAlternateUICultureCollection : IDataModelCollection<IAlternateUICulture>, IEnumerable<IAlternateUICulture>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IList.html": {
    "href": "api/PnP.Core.Model.SharePoint.IList.html",
    "title": "Interface IList | PnP Core SDK",
    "keywords": "Interface IList Public interface to define a List object of SharePoint Online Inherited Members IDataModel<IList>.GetAsync(Expression<Func<IList, Object>>[]) IDataModel<IList>.Get(Batch, Expression<Func<IList, Object>>[]) IDataModel<IList>.Get(Expression<Func<IList, Object>>[]) IDataModel<IList>.HasValue(String) IDataModel<IList>.HasChanged(String) IDataModel<IList>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IList>.GetAsync(ApiResponse, Expression<Func<IList, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() IDataModelDelete.Delete() IDataModelDelete.Delete(Batch) IDataModelDelete.DeleteAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IList : IDataModel<IList>, IDataModelParent, IDataModelWithContext, IDataModelGet<IList>, IDataModelGet, IDataModelUpdate, IDataModelDelete Properties ContentTypesEnabled Gets or sets whether content types are enabled Declaration bool ContentTypesEnabled { get; set; } Property Value Boolean DefaultDisplayFormUrl Defines a value that specifies the location of the default display form for the list. Declaration string DefaultDisplayFormUrl { get; set; } Property Value String DefaultEditFormUrl Defines a value that specifies the URL of the edit form to use for list items in the list. Declaration string DefaultEditFormUrl { get; set; } Property Value String DefaultNewFormUrl Defines a value that specifies the location of the default new form for the list. Declaration string DefaultNewFormUrl { get; set; } Property Value String Description Gets or sets the description of the list Declaration string Description { get; set; } Property Value String Direction Defines a value that specifies the reading order of the list. Declaration ListReadingDirection Direction { get; set; } Property Value ListReadingDirection DocumentTemplate Gets or sets a value that specifies the identifier of the document template for the new list. Declaration string DocumentTemplate { get; set; } Property Value String DraftVersionVisibility Gets or sets the DraftVersionVisibility for the list Declaration int DraftVersionVisibility { get; set; } Property Value Int32 EnableAttachments Gets or sets whether attachments are enabled. Defaults to true. Declaration bool EnableAttachments { get; set; } Property Value Boolean EnableFolderCreation Gets or sets whether folder is enabled. Defaults to true. Declaration bool EnableFolderCreation { get; set; } Property Value Boolean EnableMinorVersions Gets or sets whether minor verisioning is enabled on the list Declaration bool EnableMinorVersions { get; set; } Property Value Boolean EnableModeration Gets or sets whether moderation/content approval is enabled on the list Declaration bool EnableModeration { get; set; } Property Value Boolean EnableVersioning Gets or sets whether verisioning is enabled on the list Declaration bool EnableVersioning { get; set; } Property Value Boolean FieldDefaults Defines a list of default values for the Fields of the List Instance Declaration Dictionary<string, string> FieldDefaults { get; set; } Property Value Dictionary < String , String > ForceCheckout Gets or sets whether to force checkout of documents in the library Declaration bool ForceCheckout { get; set; } Property Value Boolean Hidden Gets or sets whether to hide the list Declaration bool Hidden { get; set; } Property Value Boolean Id The Unique ID of the List object Declaration Guid Id { get; set; } Property Value Guid ImageUrl Defines a value that specifies the URI for the icon of the list, optional attribute. Declaration string ImageUrl { get; set; } Property Value String IrmExpire Defines if IRM Expire property, optional attribute. Declaration bool IrmExpire { get; set; } Property Value Boolean IrmReject Defines the IRM Reject property, optional attribute. Declaration bool IrmReject { get; set; } Property Value Boolean IsApplicationList Defines a value that specifies a flag that a client application can use to determine whether to display the list, optional attribute. Declaration bool IsApplicationList { get; set; } Property Value Boolean Items Collection of list items in the current List object Declaration IListItemCollection Items { get; } Property Value IListItemCollection ListExperience Defines the current list UI/UX experience (valid for SPO only). Declaration ListExperience ListExperience { get; set; } Property Value ListExperience MaxVersionLimit Gets or sets the MinorVersionLimit for verisioning, just in case it is enabled on the list Declaration int MaxVersionLimit { get; set; } Property Value Int32 MinorVersionLimit Gets or sets the MinorVersionLimit for versioning, just in case it is enabled on the list Declaration int MinorVersionLimit { get; set; } Property Value Int32 NoCrawl Defines if the current list or library has to be included in crawling, optional attribute. Declaration bool NoCrawl { get; set; } Property Value Boolean OnQuickLaunch Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site. Declaration bool OnQuickLaunch { get; set; } Property Value Boolean ReadSecurity Defines the Read Security property, optional attribute. Declaration int ReadSecurity { get; set; } Property Value Int32 TemplateFeatureId Gets or sets the Guid for TemplateFeature Declaration Guid TemplateFeatureId { get; set; } Property Value Guid TemplateType Gets or sets a value that specifies the list server template of the new list. https://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.listtemplatetype.aspx Declaration ListTemplateType TemplateType { get; set; } Property Value ListTemplateType Title Gets or sets the list title Declaration string Title { get; set; } Property Value String Url Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site. Declaration string Url { get; set; } Property Value String ValidationFormula Defines a value that specifies the data validation criteria for a list item, optional attribute. Declaration string ValidationFormula { get; set; } Property Value String ValidationMessage Defines a value that specifies the error message returned when data validation fails for a list item, optional attribute. Declaration string ValidationMessage { get; set; } Property Value String WriteSecurity Defines the Write Security property, optional attribute. Declaration int WriteSecurity { get; set; } Property Value Int32 Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IListCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListCollection.html",
    "title": "Interface IListCollection | PnP Core SDK",
    "keywords": "Interface IListCollection Public interface to define a collection of List objects of SharePoint Online Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable<IList>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListCollection : IQueryable<IList>, IQueryable, IDataModelCollection<IList>, IEnumerable<IList>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Methods Add(Batch, String, ListTemplateType) Adds a new list Declaration IList Add(Batch batch, string title, ListTemplateType templateType) Parameters Batch batch Batch to use String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list Add(String, ListTemplateType) Adds a new list Declaration IList Add(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddAsync(String, ListTemplateType) Adds a new list Declaration Task<IList> AddAsync(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list GetByTitleAsync(String, Expression<Func<IList, Object>>[]) Gets a list by title Declaration Task<IList> GetByTitleAsync(string title, params Expression<Func<IList, object>>[] expressions) Parameters String title Title of the list to get Expression < Func < IList , Object >>[] expressions Returns Task < IList > Loaded list, null is not found GetByTitleLegacy(String, Expression<Func<IList, Object>>[]) Gets a list by title Declaration IList GetByTitleLegacy(string title, params Expression<Func<IList, object>>[] expressions) Parameters String title Title of the list to get Expression < Func < IList , Object >>[] expressions Returns IList Loaded list, null is not found Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.GetByTitle(IQueryable<IList>, String) BaseDataModelExtensions.GetByTitle(IQueryable<IList>, String, Expression<Func<IList, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IListItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItem.html",
    "title": "Interface IListItem | PnP Core SDK",
    "keywords": "Interface IListItem Inherited Members IDataModel<IListItem>.GetAsync(Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.Get(Batch, Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.Get(Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.HasValue(String) IDataModel<IListItem>.HasChanged(String) IDataModel<IListItem>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IListItem>.GetAsync(ApiResponse, Expression<Func<IListItem, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() IDataModelDelete.Delete() IDataModelDelete.Delete(Batch) IDataModelDelete.DeleteAsync() IExpandoDataModel.Values IExpandoDataModel.ToDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItem : IDataModel<IListItem>, IDataModelParent, IDataModelWithContext, IDataModelGet<IListItem>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IExpandoDataModel Properties CommentsDisabled Declaration bool CommentsDisabled { get; set; } Property Value Boolean Id Declaration int Id { get; set; } Property Value Int32 Title Declaration string Title { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IListItemCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItemCollection.html",
    "title": "Interface IListItemCollection | PnP Core SDK",
    "keywords": "Interface IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable<IListItem>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItemCollection : IQueryable<IListItem>, IQueryable, IDataModelCollection<IListItem>, IEnumerable<IListItem>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(Batch, Dictionary<String, Object>) Adds a new list item Declaration IListItem Add(Batch batch, Dictionary<string, object> values) Parameters Batch batch Batch to use Dictionary < String , Object > values Values to add to list item Returns IListItem Newly added list item Add(Dictionary<String, Object>) Adds a new list item Declaration IListItem Add(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns IListItem Newly added list item AddAsync(Dictionary<String, Object>) Adds a new list item Declaration Task<IListItem> AddAsync(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns Task < IListItem > Newly added list item Contains(Int32) Checks if the collection contains a listitem with a given id Declaration bool Contains(int id) Parameters Int32 id Id to check for Returns Boolean True if found, false otherwise Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.GetById(IQueryable<IListItem>, Int32) BaseDataModelExtensions.GetById(IQueryable<IListItem>, Int32, Expression<Func<IListItem, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ISite.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISite.html",
    "title": "Interface ISite | PnP Core SDK",
    "keywords": "Interface ISite Public interface to define a Site object of SharePoint Online Inherited Members IDataModel<ISite>.GetAsync(Expression<Func<ISite, Object>>[]) IDataModel<ISite>.Get(Batch, Expression<Func<ISite, Object>>[]) IDataModel<ISite>.Get(Expression<Func<ISite, Object>>[]) IDataModel<ISite>.HasValue(String) IDataModel<ISite>.HasChanged(String) IDataModel<ISite>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISite>.GetAsync(ApiResponse, Expression<Func<ISite, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISite : IDataModel<ISite>, IDataModelParent, IDataModelWithContext, IDataModelGet<ISite>, IDataModelGet, IDataModelUpdate Properties AllWebs Collection of sub-webs in the current Site object Declaration IWebCollection AllWebs { get; set; } Property Value IWebCollection Classification The Classification of the Site object Declaration string Classification { get; set; } Property Value String GroupId The unique ID of the connected Office 365 Group (if any) Declaration Guid GroupId { get; set; } Property Value Guid Id The Unique ID of the Site object Declaration Guid Id { get; set; } Property Value Guid RootWeb The RootWeb of the Site object Declaration IWeb RootWeb { get; set; } Property Value IWeb SearchBoxInNavBar Define if the suitebar search box should show or not Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchCenterUrl Defines the Search Center URL Declaration string SearchCenterUrl { get; set; } Property Value String SocialBarOnSitePagesDisabled Defines whether social bar is disabled on Site Pages in this site collection Declaration bool SocialBarOnSitePagesDisabled { get; set; } Property Value Boolean Url The URL of the Site object Declaration Uri Url { get; set; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IWeb.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWeb.html",
    "title": "Interface IWeb | PnP Core SDK",
    "keywords": "Interface IWeb Public interface to define a Web object of SharePoint Online Inherited Members IDataModel<IWeb>.GetAsync(Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.Get(Batch, Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.Get(Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.HasValue(String) IDataModel<IWeb>.HasChanged(String) IDataModel<IWeb>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IWeb>.GetAsync(ApiResponse, Expression<Func<IWeb, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() IDataModelDelete.Delete() IDataModelDelete.Delete(Batch) IDataModelDelete.DeleteAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWeb : IDataModel<IWeb>, IDataModelParent, IDataModelWithContext, IDataModelGet<IWeb>, IDataModelGet, IDataModelUpdate, IDataModelDelete Properties AlternateCSS The AlternateCSS of the Site, optional attribute. Declaration string AlternateCSS { get; set; } Property Value String AlternateUICultures Defines the list of Alternate UI Cultures for the current web Declaration IAlternateUICultureCollection AlternateUICultures { get; set; } Property Value IAlternateUICultureCollection CommentsOnSitePagesDisabled Defines whether the comments on site pages are disabled or not Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean CustomMasterPageUrl The Custom MasterPage Url of the Site, optional attribute. Declaration string CustomMasterPageUrl { get; set; } Property Value String Description The Description of the Site, optional attribute. Declaration string Description { get; set; } Property Value String DisableAppViews Defines whether disable PowerApps for the current web Declaration bool DisableAppViews { get; set; } Property Value Boolean DisableFlows Defines whether disable flows for the current web Declaration bool DisableFlows { get; set; } Property Value Boolean ExcludeFromOfflineClient Defines whether to exclude the web from offline client Declaration bool ExcludeFromOfflineClient { get; set; } Property Value Boolean HorizontalQuickLaunch Defines whether to enable the Horizontal QuickLaunch for the current web Declaration bool HorizontalQuickLaunch { get; set; } Property Value Boolean Id The Unique ID of the Web object Declaration Guid Id { get; set; } Property Value Guid IsMultilingual Defines whether to enable Multilingual capabilities for the current web Declaration bool IsMultilingual { get; set; } Property Value Boolean Lists Collection of lists in the current Web object Declaration IListCollection Lists { get; } Property Value IListCollection MasterPageUrl The MasterPage Url of the Site, optional attribute. Declaration string MasterPageUrl { get; set; } Property Value String MembersCanShare Defines whether members can share content from the current web Declaration bool MembersCanShare { get; set; } Property Value Boolean NoCrawl Defines whether the site has to be crawled or not Declaration bool NoCrawl { get; set; } Property Value Boolean OverwriteTranslationsOnChange Defines whether to OverwriteTranslationsOnChange on change for the current web Declaration bool OverwriteTranslationsOnChange { get; set; } Property Value Boolean QuickLaunchEnabled Enables or disables the QuickLaunch for the site Declaration bool QuickLaunchEnabled { get; set; } Property Value Boolean RequestAccessEmail The email address to which any access request will be sent Declaration string RequestAccessEmail { get; set; } Property Value String SearchBoxInNavBar Define if the suitebar search box should show or not Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchCenterUrl Defines the Search Center URL Declaration string SearchCenterUrl { get; set; } Property Value String SearchScope Defines the SearchScope for the site Declaration SearchScopes SearchScope { get; set; } Property Value SearchScopes SiteLogo The SiteLogo of the Site, optional attribute. Declaration string SiteLogo { get; set; } Property Value String Title The Title of the Site, optional attribute. Declaration string Title { get; set; } Property Value String Url The URL of the Web object Declaration Uri Url { get; set; } Property Value Uri Webs Collection of webs in this current web Declaration IWebCollection Webs { get; } Property Value IWebCollection WelcomePage Defines the Welcome Page (Home Page) of the site to which the Provisioning Template is applied. Declaration string WelcomePage { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.SharePoint.IWebCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWebCollection.html",
    "title": "Interface IWebCollection | PnP Core SDK",
    "keywords": "Interface IWebCollection Public interface to define a collection of Web objects of SharePoint Online Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable<IWeb>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWebCollection : IQueryable<IWeb>, IQueryable, IDataModelCollection<IWeb>, IEnumerable<IWeb>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ListExperience.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListExperience.html",
    "title": "Enum ListExperience | PnP Core SDK",
    "keywords": "Enum ListExperience Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListExperience Auto SPO will automatically define the right experience based on the settings of the current list, it is the default value. ClassicExperience The Classic experience will be forced for the current list. NewExperience The Modern experience will be forced for the current list. Extension Methods DataModelExtensions.IsPropertyAvailable<ListExperience>(Expression<Func<ListExperience, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ListReadingDirection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListReadingDirection.html",
    "title": "Enum ListReadingDirection | PnP Core SDK",
    "keywords": "Enum ListReadingDirection Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListReadingDirection LTR Left to Right None None RTL Right to Left Extension Methods DataModelExtensions.IsPropertyAvailable<ListReadingDirection>(Expression<Func<ListReadingDirection, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ListTemplateType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListTemplateType.html",
    "title": "Enum ListTemplateType | PnP Core SDK",
    "keywords": "Enum ListTemplateType Enumeration to define the list template types for SharePoint Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListTemplateType AccessApp AccessRequest AdminTasks Agenda AlchemyApprovalWorkflow AlchemyMobileForm Announcements AppDataCatalog AppFilesCatalog CallTrack Categories Circulation Comments Contacts ContentCenterPrimeLibrary ContentCenterSampleLibrary CustomGrid DataConnectionLibrary DataSources Decision DesignCatalog DeveloperSiteDraftApps DiscussionBoard DocumentLibrary Events ExternalList Facility FormulasTable GanttTasks GenericList HashtagStore HealthReports HealthRules HelpLibrary Holidays HomePageLibrary IMEDic InvalidType IssueTracking ItemReferenceCollection ItemReferenceReference ItemReferenceReferenceCollection Links ListTemplateCatalog MaintenanceLogs MasterPageCatalog MeetingObjective Meetings MeetingUser MySiteDocumentLibrary NoCodePublic NoCodeWorkflows NoListTemplate PictureLibrary Posts PromotedLinks RecipesTable SharingLinks SolutionCatalog Survey Tasks TasksWithTimelineAndHierarchy TextBox ThemeCatalog ThingsToBring Timecard UserInformation WebPageLibrary WebPartCatalog WebTemplateCatalog WebTemplateExtensionsList Whereabouts WorkflowHistory WorkflowProcess XMLForm Extension Methods DataModelExtensions.IsPropertyAvailable<ListTemplateType>(Expression<Func<ListTemplateType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html",
    "title": "Enum SearchBoxInNavBar | PnP Core SDK",
    "keywords": "Enum SearchBoxInNavBar Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchBoxInNavBar AllPages Hidden Inherit ModernOnly Extension Methods DataModelExtensions.IsPropertyAvailable<SearchBoxInNavBar>(Expression<Func<SearchBoxInNavBar, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.SearchScopes.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchScopes.html",
    "title": "Enum SearchScopes | PnP Core SDK",
    "keywords": "Enum SearchScopes Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchScopes DefaultScope Defines the DefaultScope for the SearchScope of the site Hub Defines the Hub for the SearchScope of the site Site Defines the Site for the SearchScope of the site Tenant Defines the Tenant for the SearchScope of the site Extension Methods DataModelExtensions.IsPropertyAvailable<SearchScopes>(Expression<Func<SearchScopes, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageContentType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageContentType.html",
    "title": "Enum ChatMessageContentType | PnP Core SDK",
    "keywords": "Enum ChatMessageContentType Chat message content types Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageContentType Html Text Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageContentType>(Expression<Func<ChatMessageContentType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageImportance.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageImportance.html",
    "title": "Enum ChatMessageImportance | PnP Core SDK",
    "keywords": "Enum ChatMessageImportance The importance of the chat message. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageImportance High Normal Urgent Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageImportance>(Expression<Func<ChatMessageImportance, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageType.html",
    "title": "Enum ChatMessageType | PnP Core SDK",
    "keywords": "Enum ChatMessageType Types of chat messages Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageType Message Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageType>(Expression<Func<ChatMessageType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.html": {
    "href": "api/PnP.Core.Model.Teams.html",
    "title": "Namespace PnP.Core.Model.Teams | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.Teams Interfaces ITeam Public interface to define a Team object of Microsoft Teams ITeamApp Defines a Microsoft Teams App installation ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams ITeamChannel Defines a Channel of Microsoft Teams ITeamChannelCollection Public interface to define a collection of Team Channels ITeamChannelTab Defines the tab in a Team channel ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. ITeamChatMessageAttachment ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. ITeamChatMessageContent ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. ITeamChatMessageReaction Represents a reaction to a chatMessage entity. ITeamClassSettings Public interface to define the settings for a classroom ITeamDiscoverySettings Public interface to define the discovery settings for a Team ITeamFunSettings Public interface to define the fun settings for a Team ITeamGuestSettings Public interface to define the guest settings for a Team ITeamIdentitySet ITeamMembersSettings Public interface to define the memebers settings for a Team ITeamMessagingSettings Public interface to define the messaging settings for a Team Enums ChatMessageContentType Chat message content types ChatMessageImportance The importance of the chat message. ChatMessageType Types of chat messages TeamChannelMembershipType Defines the Membership Type for a Team Channel TeamGiphyContentRating Giphy content rating for giphies being used in a team TeamsAppDistributionMethod TeamSpecialization Defines the Specialization options for a Team TeamVisibility Defines the Visibility for a Team"
  },
  "api/PnP.Core.Model.Teams.ITeam.html": {
    "href": "api/PnP.Core.Model.Teams.ITeam.html",
    "title": "Interface ITeam | PnP Core SDK",
    "keywords": "Interface ITeam Public interface to define a Team object of Microsoft Teams Inherited Members IDataModel<ITeam>.GetAsync(Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.Get(Batch, Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.Get(Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.HasValue(String) IDataModel<ITeam>.HasChanged(String) IDataModel<ITeam>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeam>.GetAsync(ApiResponse, Expression<Func<ITeam, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeam : IDataModel<ITeam>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeam>, IDataModelGet, IDataModelUpdate Properties Channels Collection of channels in this current Team Declaration ITeamChannelCollection Channels { get; } Property Value ITeamChannelCollection Classification The classification of the Team Declaration string Classification { get; set; } Property Value String ClassSettings Defines the Class Settings for the Team Declaration ITeamClassSettings ClassSettings { get; set; } Property Value ITeamClassSettings Description The description of the Team Declaration string Description { get; set; } Property Value String DiscoverySettings Defines the Members Settings for the Team Declaration ITeamDiscoverySettings DiscoverySettings { get; set; } Property Value ITeamDiscoverySettings DisplayName The display name of the Team Declaration string DisplayName { get; set; } Property Value String FunSettings Defines the Members Settings for the Team Declaration ITeamFunSettings FunSettings { get; set; } Property Value ITeamFunSettings GuestSettings Defines the Guest Settings for the Team Declaration ITeamGuestSettings GuestSettings { get; set; } Property Value ITeamGuestSettings Id The Unique ID of the Team/Group Declaration Guid Id { get; set; } Property Value Guid InstalledApps Collection of installed apps in this current Team Declaration ITeamAppCollection InstalledApps { get; } Property Value ITeamAppCollection InternalId The Internal ID of the Team Declaration string InternalId { get; set; } Property Value String IsArchived Defines whether the Team is archived or not Declaration bool IsArchived { get; set; } Property Value Boolean Members Collection of Members of the current Team Declaration IUserCollection Members { get; } Property Value IUserCollection MemberSettings Defines the Members Settings for the Team Declaration ITeamMembersSettings MemberSettings { get; set; } Property Value ITeamMembersSettings MessagingSettings Defines the Members Settings for the Team Declaration ITeamMessagingSettings MessagingSettings { get; set; } Property Value ITeamMessagingSettings Owners Collection of Owners of the current Team Declaration IUserCollection Owners { get; } Property Value IUserCollection PrimaryChannel Reference to the Primary Channel for the Team Declaration ITeamChannel PrimaryChannel { get; set; } Property Value ITeamChannel Specialization The specialization of the Team Declaration TeamSpecialization Specialization { get; set; } Property Value TeamSpecialization Visibility The specialization of the Team Declaration TeamVisibility Visibility { get; set; } Property Value TeamVisibility WebUrl The Web URL of the Team Declaration Uri WebUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamApp.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamApp.html",
    "title": "Interface ITeamApp | PnP Core SDK",
    "keywords": "Interface ITeamApp Defines a Microsoft Teams App installation Inherited Members IDataModel<ITeamApp>.GetAsync(Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.Get(Batch, Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.Get(Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.HasValue(String) IDataModel<ITeamApp>.HasChanged(String) IDataModel<ITeamApp>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamApp>.GetAsync(ApiResponse, Expression<Func<ITeamApp, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamApp : IDataModel<ITeamApp>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamApp>, IDataModelGet Properties DisplayName The Display Name of the Team App Declaration string DisplayName { get; set; } Property Value String DistributionMethod The method of distribution for the Team App Declaration TeamsAppDistributionMethod DistributionMethod { get; set; } Property Value TeamsAppDistributionMethod ExternalId The external ID of the Team App as defined by the developer Declaration string ExternalId { get; set; } Property Value String Id The unique Id of the Team App in the current app catalog Declaration string Id { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamAppCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamAppCollection.html",
    "title": "Interface ITeamAppCollection | PnP Core SDK",
    "keywords": "Interface ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams Inherited Members IEnumerable<ITeamApp>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamAppCollection : IDataModelCollection<ITeamApp>, IEnumerable<ITeamApp>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannel.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannel.html",
    "title": "Interface ITeamChannel | PnP Core SDK",
    "keywords": "Interface ITeamChannel Defines a Channel of Microsoft Teams Inherited Members IDataModel<ITeamChannel>.GetAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.Get(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.Get(Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.HasValue(String) IDataModel<ITeamChannel>.HasChanged(String) IDataModel<ITeamChannel>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannel>.GetAsync(ApiResponse, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() IDataModelDelete.Delete() IDataModelDelete.Delete(Batch) IDataModelDelete.DeleteAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChannel>, IDataModelGet, IDataModelUpdate, IDataModelDelete Properties Description The description of the Team Channel Declaration string Description { get; set; } Property Value String DisplayName The display name of the Team Channel Declaration string DisplayName { get; set; } Property Value String Email The email address of the Team Channel Declaration string Email { get; set; } Property Value String Id The Unique ID of the Team Channel Declaration string Id { get; set; } Property Value String IsFavoriteByDefault Defines whether the Team Channel is favorite by default in the Team Declaration bool IsFavoriteByDefault { get; set; } Property Value Boolean MembershipType Defines the Membership type for the Team Channel Declaration TeamChannelMembershipType MembershipType { get; set; } Property Value TeamChannelMembershipType Messages Messages in this Team Channel Declaration ITeamChatMessageCollection Messages { get; } Property Value ITeamChatMessageCollection Tabs Tabs in this Channel Declaration ITeamChannelTabCollection Tabs { get; } Property Value ITeamChannelTabCollection WebUrl The Web URL of the Team Channel Declaration Uri WebUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelCollection.html",
    "title": "Interface ITeamChannelCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelCollection Public interface to define a collection of Team Channels Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable<ITeamChannel>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelCollection : IQueryable<ITeamChannel>, IQueryable, IDataModelCollection<ITeamChannel>, IEnumerable<ITeamChannel>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Methods Add(Batch, String, String) Adds a new channel Declaration ITeamChannel Add(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel Add(String, String) Adds a new channel Declaration ITeamChannel Add(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddAsync(String, String) Adds a new channel Declaration Task<ITeamChannel> AddAsync(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.GetByDisplayName(IQueryable<ITeamChannel>, String) BaseDataModelExtensions.GetByDisplayName(IQueryable<ITeamChannel>, String, Expression<Func<ITeamChannel, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTab.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTab.html",
    "title": "Interface ITeamChannelTab | PnP Core SDK",
    "keywords": "Interface ITeamChannelTab Defines the tab in a Team channel Inherited Members IDataModel<ITeamChannelTab>.GetAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.Get(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.Get(Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.HasValue(String) IDataModel<ITeamChannelTab>.HasChanged(String) IDataModel<ITeamChannelTab>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannelTab>.GetAsync(ApiResponse, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelDelete.Delete() IDataModelDelete.Delete(Batch) IDataModelDelete.DeleteAsync() IDataModelUpdate.Update() IDataModelUpdate.Update(Batch) IDataModelUpdate.UpdateAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTab : IDataModel<ITeamChannelTab>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChannelTab>, IDataModelGet, IDataModelDelete, IDataModelUpdate Properties Configuration Container for custom settings applied to a tab. The tab is considered configured only once this property is set. Declaration ITeamChannelTabConfiguration Configuration { get; set; } Property Value ITeamChannelTabConfiguration DisplayName Name of the tab. Declaration string DisplayName { get; set; } Property Value String Id Identifier that uniquely identifies a specific instance of a channel tab. Read only. Declaration Guid Id { get; set; } Property Value Guid SortOrderIndex Index of the order used for sorting tabs. Declaration string SortOrderIndex { get; set; } Property Value String TeamsApp The application that is linked to the tab. This cannot be changed after tab creation. Declaration ITeamApp TeamsApp { get; set; } Property Value ITeamApp WebUrl Deep link url of the tab instance. Read only. Declaration Uri WebUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html",
    "title": "Interface ITeamChannelTabCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel Inherited Members IEnumerable<ITeamChannelTab>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabCollection : IDataModelCollection<ITeamChannelTab>, IEnumerable<ITeamChannelTab>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Methods AddDocumentLibraryTab(Batch, String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTab(Batch batch, string name, Uri documentLibraryUri) Parameters Batch batch Batch to use String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTab(String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTab(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabAsync(String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddWikiTab(Batch, String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTab(Batch batch, string name) Parameters Batch batch Batch to use String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTab(String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTab(string name) Parameters String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabAsync(String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabAsync(string name) Parameters String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html",
    "title": "Interface ITeamChannelTabConfiguration | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabConfiguration : IComplexType Properties ContentUrl Url used for rendering tab contents in Teams. Required. Declaration string ContentUrl { get; set; } Property Value String EntityId Identifier for the entity hosted by the tab provider. Declaration string EntityId { get; set; } Property Value String HasContent Is there content in this tab. Declaration bool HasContent { get; set; } Property Value Boolean RemoveUrl Url called by Teams client when a Tab is removed using the Teams Client. Declaration string RemoveUrl { get; set; } Property Value String WebsiteUrl Url for showing tab contents outside of Teams. Declaration string WebsiteUrl { get; set; } Property Value String WikiDefaultTab Is this the default wiki tab. Declaration bool WikiDefaultTab { get; set; } Property Value Boolean WikiTabId Wiki tab id. Declaration int WikiTabId { get; set; } Property Value Int32 Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessage.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessage.html",
    "title": "Interface ITeamChatMessage | PnP Core SDK",
    "keywords": "Interface ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. Inherited Members IDataModel<ITeamChatMessage>.GetAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.Get(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.Get(Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.HasValue(String) IDataModel<ITeamChatMessage>.HasChanged(String) IDataModel<ITeamChatMessage>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChatMessage>.GetAsync(ApiResponse, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet.Get(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessage : IDataModel<ITeamChatMessage>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChatMessage>, IDataModelGet Properties Attachments Attached files. Attachments are currently read-only – sending attachments is not supported. Declaration List<ITeamChatMessageAttachment> Attachments { get; } Property Value List < ITeamChatMessageAttachment > Body Plaintext/HTML representation of the content of the chat message. Representation is specified by the contentType inside the body. The content is always in HTML if the chat message contains a chatMessageMention. Declaration ITeamChatMessageContent Body { get; set; } Property Value ITeamChatMessageContent CreatedDateTime Read only. Timestamp of when the chat message was created. Declaration DateTimeOffset CreatedDateTime { get; set; } Property Value DateTimeOffset DeletedDateTime Read only. Timestamp at which the chat message was deleted, or null if not deleted. Declaration DateTimeOffset DeletedDateTime { get; set; } Property Value DateTimeOffset Etag Read-only. Version number of the chat message. Declaration string Etag { get; set; } Property Value String From Read only. Details of the sender of the chat message. Declaration ITeamIdentitySet From { get; set; } Property Value ITeamIdentitySet Id Read-only. Unique Id of the message. Declaration string Id { get; set; } Property Value String Importance The importance of the chat message. Declaration ChatMessageImportance Importance { get; set; } Property Value ChatMessageImportance LastModifiedDateTime Read only. Timestamp of when the chat message is created or edited, including when a reply is made (if it's a root chat message in a channel) or a reaction is added or removed. Declaration DateTimeOffset LastModifiedDateTime { get; set; } Property Value DateTimeOffset Locale Locale of the team chat message Declaration string Locale { get; set; } Property Value String Mentions List of entities mentioned in the chat message. Currently supports user, bot, team, channel. Declaration List<ITeamChatMessageMention> Mentions { get; } Property Value List < ITeamChatMessageMention > MessageType The type of chat message. The possible values are: message. Declaration ChatMessageType MessageType { get; set; } Property Value ChatMessageType Reactions Reactions for this chat message (for example, Like). Declaration List<ITeamChatMessageReaction> Reactions { get; } Property Value List < ITeamChatMessageReaction > ReplyToId Read-only. Id of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels not chats) Declaration string ReplyToId { get; set; } Property Value String Subject The subject of the chat message, in plaintext. Declaration string Subject { get; set; } Property Value String Summary Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat. Declaration string Summary { get; set; } Property Value String WebUrl The Web URL of the team chat message Declaration Uri WebUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html",
    "title": "Interface ITeamChatMessageAttachment | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageAttachment Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageAttachment : IComplexType Properties Content The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. Declaration string Content { get; set; } Property Value String ContentType The media type of the content attachment. Declaration string ContentType { get; set; } Property Value String ContentUrl URL for the content of the attachment. Supported protocols: http, https, file and data. Declaration Uri ContentUrl { get; set; } Property Value Uri Id Read-only. Unique id of the attachment. Declaration string Id { get; set; } Property Value String Name Name of the attachment. Declaration string Name { get; set; } Property Value String ThumbnailUrl URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document. Declaration Uri ThumbnailUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html",
    "title": "Interface ITeamChatMessageCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable<ITeamChatMessage>.GetEnumerator() IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging.CanPage ISupportPaging.GetNextPageAsync() ISupportPaging.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageCollection : IQueryable<ITeamChatMessage>, IQueryable, IDataModelCollection<ITeamChatMessage>, IEnumerable<ITeamChatMessage>, IEnumerable, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging Methods Add(Batch, String) Adds a new channel chat message Declaration ITeamChatMessage Add(Batch batch, string body) Parameters Batch batch Batch to use String body Returns ITeamChatMessage Newly added channel chat message Add(String) Adds a new channel chat message Declaration ITeamChatMessage Add(string body) Parameters String body Returns ITeamChatMessage Newly added channel chat message AddAsync(String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddAsync(string body) Parameters String body Returns Task < ITeamChatMessage > Newly added channel chat message Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.EnsureParentObjectAsync(IDataModelParent) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) BaseDataModelExtensions.Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html",
    "title": "Interface ITeamChatMessageContent | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageContent Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageContent : IComplexType Properties Content The content of the item. Declaration string Content { get; set; } Property Value String ContentType The type of the content. Possible values are text and html. Declaration ChatMessageContentType ContentType { get; set; } Property Value ChatMessageContentType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html",
    "title": "Interface ITeamChatMessageMention | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageMention : IComplexType Properties Id Index of an entity being mentioned in the specified chatMessage. Declaration int Id { get; set; } Property Value Int32 Mentioned The entity (user, application, team, or channel) that was mentioned. If it was a channel or team that was @mentioned, the identitySet contains a conversation property giving the ID of the team/channel, and a conversationIdentityType property that represents either the team or channel. Declaration ITeamIdentitySet Mentioned { get; set; } Property Value ITeamIdentitySet MentionText String used to represent the mention. For example, a user's display name, a team name. Declaration string MentionText { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html",
    "title": "Interface ITeamChatMessageReaction | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageReaction Represents a reaction to a chatMessage entity. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageReaction : IComplexType Properties CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z' Declaration DateTimeOffset CreatedDateTime { get; set; } Property Value DateTimeOffset ReactionType Type of reaction Declaration string ReactionType { get; set; } Property Value String User The user who reacted to the message. Declaration ITeamIdentitySet User { get; set; } Property Value ITeamIdentitySet Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamClassSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamClassSettings.html",
    "title": "Interface ITeamClassSettings | PnP Core SDK",
    "keywords": "Interface ITeamClassSettings Public interface to define the settings for a classroom Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamClassSettings Properties NotifyGuardiansAboutAssignments Declaration bool NotifyGuardiansAboutAssignments { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html",
    "title": "Interface ITeamDiscoverySettings | PnP Core SDK",
    "keywords": "Interface ITeamDiscoverySettings Public interface to define the discovery settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamDiscoverySettings : IComplexType Properties ShowInTeamsSearchAndSuggestions Declaration bool ShowInTeamsSearchAndSuggestions { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamFunSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamFunSettings.html",
    "title": "Interface ITeamFunSettings | PnP Core SDK",
    "keywords": "Interface ITeamFunSettings Public interface to define the fun settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamFunSettings : IComplexType Properties AllowCustomMemes Defines whether the custom memes are allowed in the Team Declaration bool AllowCustomMemes { get; set; } Property Value Boolean AllowGiphy Defines whether the Giphy are allowed in the Team Declaration bool AllowGiphy { get; set; } Property Value Boolean AllowStickersAndMemes Defines whether the stickers and meme are allowed in the Team Declaration bool AllowStickersAndMemes { get; set; } Property Value Boolean GiphyContentRating Defines the Giphy content rating (strict or moderate) Declaration TeamGiphyContentRating GiphyContentRating { get; set; } Property Value TeamGiphyContentRating Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamGuestSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamGuestSettings.html",
    "title": "Interface ITeamGuestSettings | PnP Core SDK",
    "keywords": "Interface ITeamGuestSettings Public interface to define the guest settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamGuestSettings : IComplexType Properties AllowCreateUpdateChannels Defines whether the guests can create or update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the guests can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamIdentitySet.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamIdentitySet.html",
    "title": "Interface ITeamIdentitySet | PnP Core SDK",
    "keywords": "Interface ITeamIdentitySet Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamIdentitySet : IComplexType Properties Application Optional. The application associated with this action. Declaration IIdentity Application { get; set; } Property Value IIdentity Conversation Optional. The team or channel associated with this action. Declaration IIdentity Conversation { get; set; } Property Value IIdentity ConversationIdentityType Optional. Indicates whether the conversation property identifies a team or channel. Declaration IIdentity ConversationIdentityType { get; set; } Property Value IIdentity Device Optional. The device associated with this action. Declaration IIdentity Device { get; set; } Property Value IIdentity Phone Optional. The phone number associated with this action. Declaration IIdentity Phone { get; set; } Property Value IIdentity User Optional. The user associated with this action. Declaration IIdentity User { get; set; } Property Value IIdentity Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMembersSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMembersSettings.html",
    "title": "Interface ITeamMembersSettings | PnP Core SDK",
    "keywords": "Interface ITeamMembersSettings Public interface to define the memebers settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMembersSettings : IComplexType Properties AllowAddRemoveApps Defines whether the team members can add or remove apps Declaration bool AllowAddRemoveApps { get; set; } Property Value Boolean AllowCreatePrivateChannels Defines whether the team members can create private channels Declaration bool AllowCreatePrivateChannels { get; set; } Property Value Boolean AllowCreateUpdateChannels Defines whether the team members can update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowCreateUpdateRemoveConnectors Defines whether the team members can create, update, or remove connectors Declaration bool AllowCreateUpdateRemoveConnectors { get; set; } Property Value Boolean AllowCreateUpdateRemoveTabs Defines whether the team members can update or remove tabs Declaration bool AllowCreateUpdateRemoveTabs { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the team members can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html",
    "title": "Interface ITeamMessagingSettings | PnP Core SDK",
    "keywords": "Interface ITeamMessagingSettings Public interface to define the messaging settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMessagingSettings : IComplexType Properties AllowChannelMentions Defines whether users can use channel mentions Declaration bool AllowChannelMentions { get; set; } Property Value Boolean AllowOwnerDeleteMessages Defines whether owners can delete messages Declaration bool AllowOwnerDeleteMessages { get; set; } Property Value Boolean AllowTeamMentions Defines whether users can use team mentions Declaration bool AllowTeamMentions { get; set; } Property Value Boolean AllowUserDeleteMessages Defines whether users can delete messages Declaration bool AllowUserDeleteMessages { get; set; } Property Value Boolean AllowUserEditMessages Defines whether users can edit messages Declaration bool AllowUserEditMessages { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html": {
    "href": "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html",
    "title": "Enum TeamChannelMembershipType | PnP Core SDK",
    "keywords": "Enum TeamChannelMembershipType Defines the Membership Type for a Team Channel Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamChannelMembershipType Private Standard UnknownFutureValue Extension Methods DataModelExtensions.IsPropertyAvailable<TeamChannelMembershipType>(Expression<Func<TeamChannelMembershipType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html": {
    "href": "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html",
    "title": "Enum TeamGiphyContentRating | PnP Core SDK",
    "keywords": "Enum TeamGiphyContentRating Giphy content rating for giphies being used in a team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamGiphyContentRating Moderate Strict Extension Methods DataModelExtensions.IsPropertyAvailable<TeamGiphyContentRating>(Expression<Func<TeamGiphyContentRating, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html": {
    "href": "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html",
    "title": "Enum TeamsAppDistributionMethod | PnP Core SDK",
    "keywords": "Enum TeamsAppDistributionMethod Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamsAppDistributionMethod Organization Sideloaded Store Extension Methods DataModelExtensions.IsPropertyAvailable<TeamsAppDistributionMethod>(Expression<Func<TeamsAppDistributionMethod, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamSpecialization.html": {
    "href": "api/PnP.Core.Model.Teams.TeamSpecialization.html",
    "title": "Enum TeamSpecialization | PnP Core SDK",
    "keywords": "Enum TeamSpecialization Defines the Specialization options for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamSpecialization EducationClass EducationProfessionalLearningCommunity EducationStaff EducationStandard None UnknownFutureValue Extension Methods DataModelExtensions.IsPropertyAvailable<TeamSpecialization>(Expression<Func<TeamSpecialization, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamVisibility.html": {
    "href": "api/PnP.Core.Model.Teams.TeamVisibility.html",
    "title": "Enum TeamVisibility | PnP Core SDK",
    "keywords": "Enum TeamVisibility Defines the Visibility for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamVisibility Private Public Extension Methods DataModelExtensions.IsPropertyAvailable<TeamVisibility>(Expression<Func<TeamVisibility, Object>>)"
  },
  "api/PnP.Core.Model.TransientDictionary.html": {
    "href": "api/PnP.Core.Model.TransientDictionary.html",
    "title": "Class TransientDictionary | PnP Core SDK",
    "keywords": "Class TransientDictionary Class tracks Dictionary changes Inheritance Object Dictionary < String , Object > TransientDictionary Inherited Members System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) Dictionary<String, Object>.Add(String, Object) Dictionary<String, Object>.Clear() Dictionary<String, Object>.ContainsKey(String) Dictionary<String, Object>.ContainsValue(Object) Dictionary<String, Object>.EnsureCapacity(Int32) Dictionary<String, Object>.GetEnumerator() Dictionary<String, Object>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<String, Object>.OnDeserialization(Object) Dictionary<String, Object>.Remove(String) Dictionary<String, Object>.Remove(String, Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator() Dictionary<String, Object>.ICollection.CopyTo(Array, Int32) Dictionary<String, Object>.IDictionary.Add(Object, Object) Dictionary<String, Object>.IDictionary.Contains(Object) Dictionary<String, Object>.IDictionary.GetEnumerator() Dictionary<String, Object>.IDictionary.Remove(Object) Dictionary<String, Object>.IEnumerable.GetEnumerator() Dictionary<String, Object>.TrimExcess() Dictionary<String, Object>.TrimExcess(Int32) Dictionary<String, Object>.TryAdd(String, Object) Dictionary<String, Object>.TryGetValue(String, Object) Dictionary<String, Object>.Comparer Dictionary<String, Object>.Count Dictionary<String, Object>.Item[String] Dictionary<String, Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values Dictionary<String, Object>.ICollection.IsSynchronized Dictionary<String, Object>.ICollection.SyncRoot Dictionary<String, Object>.IDictionary.IsFixedSize Dictionary<String, Object>.IDictionary.IsReadOnly Dictionary<String, Object>.IDictionary.Item[Object] Dictionary<String, Object>.IDictionary.Keys Dictionary<String, Object>.IDictionary.Values Dictionary<String, Object>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class TransientDictionary : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Constructors TransientDictionary() Default constructor Declaration public TransientDictionary() TransientDictionary(Dictionary<String, Object>) Constructor that initializes based upon an existing Dictionary Declaration public TransientDictionary(Dictionary<string, object> input) Parameters Dictionary < String , Object > input Dictionary<TKey,TValue> holding the key value pairs to add Properties HasChanges Declaration public bool HasChanges { get; } Property Value Boolean Item[String] Gets or sets the value of an object in this dictionary Declaration public object this[string key] { get; set; } Parameters String key Key of the object to set Property Value Object Methods Add(String, Object) Adds a new item to the dictionary Declaration public void Add(string key, object value) Parameters String key Key of the item to add Object value Value of the item to add Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.TypeExtensions.html": {
    "href": "api/PnP.Core.Model.TypeExtensions.html",
    "title": "Class TypeExtensions | PnP Core SDK",
    "keywords": "Class TypeExtensions Extensions to the Type class Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class TypeExtensions Methods ImplementsInterface(Type, Type) Verify if a generic interface was implemented Declaration public static bool ImplementsInterface(this Type propertyType, Type interfaceType) Parameters Type propertyType Property to check on Type interfaceType Interface to check for Returns Boolean True if implemented, false otherwise"
  },
  "api/PnP.Core.PnPConstants.html": {
    "href": "api/PnP.Core.PnPConstants.html",
    "title": "Class PnPConstants | PnP Core SDK",
    "keywords": "Class PnPConstants Support class to provide all the constants for the engine Inheritance Object PnPConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public static class PnPConstants Fields GraphBetaEndpoint Graph beta endpoint Declaration public static readonly string GraphBetaEndpoint Field Value String GraphV1Endpoint Graph v1 endpoint Declaration public static readonly string GraphV1Endpoint Field Value String MetaDataEtag The name of the ETag metadata attribute Declaration public const string MetaDataEtag = \"etag\" Field Value String MetaDataGraphId The name of the Microsoft Graph ID metadata attribute Declaration public const string MetaDataGraphId = \"graphId\" Field Value String MetaDataId The name of the ID metadata attribute Declaration public const string MetaDataId = \"id\" Field Value String MetaDataRestEntityTypeName The name of the Entity Type Name metadata attribute Declaration public const string MetaDataRestEntityTypeName = \"EntityTypeName\" Field Value String MetaDataRestId The name of the REST Id metadata attribute Declaration public const string MetaDataRestId = \"restId\" Field Value String MetaDataType The name of the Data Type metadata attribute Declaration public const string MetaDataType = \"type\" Field Value String MetaDataUri The name of the URI metadata attribute Declaration public const string MetaDataUri = \"uri\" Field Value String MicrosoftGraphBaseUri The base URI of the Microsoft Graph Declaration public static readonly Uri MicrosoftGraphBaseUri Field Value Uri MicrosoftGraphBaseUrl The string base URL of the Microsoft Graph Declaration public const string MicrosoftGraphBaseUrl = \"https://graph.microsoft.com/\" Field Value String"
  },
  "api/PnP.Core.PnPException.html": {
    "href": "api/PnP.Core.PnPException.html",
    "title": "Class PnPException | PnP Core SDK",
    "keywords": "Class PnPException Base class for the pnp core sdk exceptions Inheritance Object Exception PnPException ClientException ServiceException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class PnPException : Exception, ISerializable Constructors PnPException() Declaration public PnPException() PnPException(String) Declaration public PnPException(string message) Parameters String message PnPException(String, Exception) Declaration public PnPException(string message, Exception innerException) Parameters String message Exception innerException Properties Error Additional error information Declaration public BaseError Error { get; set; } Property Value BaseError Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.BaseDataModelExtensions.html": {
    "href": "api/PnP.Core.QueryModel.BaseDataModelExtensions.html",
    "title": "Class BaseDataModelExtensions | PnP Core SDK",
    "keywords": "Class BaseDataModelExtensions Inheritance Object BaseDataModelExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public static class BaseDataModelExtensions Methods GetByDisplayName(IQueryable<ITeamChannel>, String) Extension method to select a channel (ITeamChannel) by displayName Declaration public static ITeamChannel GetByDisplayName(this IQueryable<ITeamChannel> source, string displayName) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Returns ITeamChannel The resulting channel instance, if any GetByDisplayName(IQueryable<ITeamChannel>, String, Expression<Func<ITeamChannel, Object>>[]) Extension method to select a channel (ITeamChannel) by displayName Declaration public static ITeamChannel GetByDisplayName(this IQueryable<ITeamChannel> source, string displayName, params Expression<Func<ITeamChannel, object>>[] selectors) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Expression < Func < ITeamChannel , Object >>[] selectors The expressions declaring the fields to select Returns ITeamChannel The resulting channel instance, if any GetById(IQueryable<IListItem>, Int32) Extension method to select a list item (IListItem) by Id Declaration public static IListItem GetById(this IQueryable<IListItem> source, int id) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Returns IListItem The resulting list item instance, if any GetById(IQueryable<IListItem>, Int32, Expression<Func<IListItem, Object>>[]) Extension method to select a list item (IListItem) by Id Declaration public static IListItem GetById(this IQueryable<IListItem> source, int id, params Expression<Func<IListItem, object>>[] selectors) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns IListItem The resulting list item instance, if any GetByTitle(IQueryable<IList>, String) Extension method to select a list (IList) by title Declaration public static IList GetByTitle(this IQueryable<IList> source, string title) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Returns IList The resulting list instance, if any GetByTitle(IQueryable<IList>, String, Expression<Func<IList, Object>>[]) Extension method to select a list (IList) by title Declaration public static IList GetByTitle(this IQueryable<IList> source, string title, params Expression<Func<IList, object>>[] selectors) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) Extension method to declare the collection properties to expand while querying the REST service Declaration public static IQueryable<TResult> Include<TResult>(this IQueryable<TResult> source, Expression<Func<TResult, object>> selector) Parameters IQueryable <TResult> source The collection of items to expand properties from Expression < Func <TResult, Object >> selector A selector for the expandable properties Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare the collection properties to expand while querying the REST service Declaration public static IQueryable<TResult> Include<TResult>(this IQueryable<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters IQueryable <TResult> source The collection of items to expand properties from Expression < Func <TResult, Object >>[] selectors An array of selectors for the expandable properties Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) Extension method to declare a field/metadata property to load while executing the REST query Declaration public static IQueryable<TResult> Load<TResult>(this IQueryable<TResult> source, Expression<Func<TResult, object>> selector) Parameters IQueryable <TResult> source The collection of items to load the field/metadata from Expression < Func <TResult, Object >> selector A selector for a field/metadata Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare the fields/metadata properties to load while executing the REST query Declaration public static IQueryable<TResult> Load<TResult>(this IQueryable<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters IQueryable <TResult> source The collection of items to load fields/metadata from Expression < Func <TResult, Object >>[] selectors An array of selectors for the fields/metadata Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity"
  },
  "api/PnP.Core.QueryModel.BaseQueryProvider.html": {
    "href": "api/PnP.Core.QueryModel.BaseQueryProvider.html",
    "title": "Class BaseQueryProvider | PnP Core SDK",
    "keywords": "Class BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider Inheritance Object BaseQueryProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class BaseQueryProvider : IQueryProvider Methods CreateQuery(Expression) Declaration public abstract IQueryable CreateQuery(Expression expression) Parameters Expression expression Returns IQueryable Implements IQueryProvider.CreateQuery(Expression) CreateQuery<TResult>(Expression) Declaration public IQueryable<TResult> CreateQuery<TResult>(Expression expression) Parameters Expression expression Returns IQueryable <TResult> Type Parameters TResult Implements IQueryProvider.CreateQuery<TElement>(Expression) Execute(Expression) Declaration public abstract object Execute(Expression expression) Parameters Expression expression Returns Object Implements IQueryProvider.Execute(Expression) Execute<TResult>(Expression) Declaration public TResult Execute<TResult>(Expression expression) Parameters Expression expression Returns TResult Type Parameters TResult Implements IQueryProvider.Execute<TResult>(Expression) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilteringConcatOperator.html": {
    "href": "api/PnP.Core.QueryModel.FilteringConcatOperator.html",
    "title": "Enum FilteringConcatOperator | PnP Core SDK",
    "keywords": "Enum FilteringConcatOperator Enumeration of logical concat operators for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringConcatOperator AND Logical AND for query items in query groups OR Logical OR for query items in query groups Extension Methods DataModelExtensions.IsPropertyAvailable<FilteringConcatOperator>(Expression<Func<FilteringConcatOperator, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilteringCriteria.html": {
    "href": "api/PnP.Core.QueryModel.FilteringCriteria.html",
    "title": "Enum FilteringCriteria | PnP Core SDK",
    "keywords": "Enum FilteringCriteria Enumeration of filtering criteria for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringCriteria Equal Correspondes to the = operator GreaterThan Correspondes to the > operator GreaterThanOrEqual Correspondes to the >= operator LessThan LessThanOrEqual Not Correspondes to the ! operator NotEqual Correspondes to the != operator Extension Methods DataModelExtensions.IsPropertyAvailable<FilteringCriteria>(Expression<Func<FilteringCriteria, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilterItem.html": {
    "href": "api/PnP.Core.QueryModel.FilterItem.html",
    "title": "Class FilterItem | PnP Core SDK",
    "keywords": "Class FilterItem Defines a filtering criteria item Inheritance Object ODataFilter FilterItem Inherited Members ODataFilter.ConcatOperator Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FilterItem : ODataFilter Properties Criteria The filtering criteria. Default: Equal. Declaration public FilteringCriteria Criteria { get; set; } Property Value FilteringCriteria Field The name of the field for the filtering criteria Declaration public string Field { get; set; } Property Value String Value The actual value for the filtering criteria Declaration public object Value { get; set; } Property Value Object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.FiltersGroup.html": {
    "href": "api/PnP.Core.QueryModel.FiltersGroup.html",
    "title": "Class FiltersGroup | PnP Core SDK",
    "keywords": "Class FiltersGroup Inheritance Object ODataFilter FiltersGroup Inherited Members ODataFilter.ConcatOperator Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FiltersGroup : ODataFilter Constructors FiltersGroup() Declaration public FiltersGroup() FiltersGroup(List<ODataFilter>) Declaration public FiltersGroup(List<ODataFilter> filters) Parameters List < ODataFilter > filters Properties Filters Declaration public List<ODataFilter> Filters { get; } Property Value List < ODataFilter > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.html": {
    "href": "api/PnP.Core.QueryModel.html",
    "title": "Namespace PnP.Core.QueryModel | PnP Core SDK",
    "keywords": "Namespace PnP.Core.QueryModel Classes BaseDataModelExtensions BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider FilterItem Defines a filtering criteria item FiltersGroup ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) OrderByItem Defines a single sorting item Enums FilteringConcatOperator Enumeration of logical concat operators for queries FilteringCriteria Enumeration of filtering criteria for queries ODataTargetPlatform Defines the target platform for the query OrderByDirection Enumeration of the ordering criteria for sorting results"
  },
  "api/PnP.Core.QueryModel.ODataFilter.html": {
    "href": "api/PnP.Core.QueryModel.ODataFilter.html",
    "title": "Class ODataFilter | PnP Core SDK",
    "keywords": "Class ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) Inheritance Object ODataFilter FilterItem FiltersGroup Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class ODataFilter Properties ConcatOperator The concatenation operator between the current filter item and the next one in the chain, within the current filtering group. Default: AND. Declaration public FilteringConcatOperator ConcatOperator { get; set; } Property Value FilteringConcatOperator Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.ODataTargetPlatform.html": {
    "href": "api/PnP.Core.QueryModel.ODataTargetPlatform.html",
    "title": "Enum ODataTargetPlatform | PnP Core SDK",
    "keywords": "Enum ODataTargetPlatform Defines the target platform for the query Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum ODataTargetPlatform Graph Microsoft Graph (primary choice) SPORest Microsoft SharePoint Online REST API (fallback) Extension Methods DataModelExtensions.IsPropertyAvailable<ODataTargetPlatform>(Expression<Func<ODataTargetPlatform, Object>>)"
  },
  "api/PnP.Core.QueryModel.OrderByDirection.html": {
    "href": "api/PnP.Core.QueryModel.OrderByDirection.html",
    "title": "Enum OrderByDirection | PnP Core SDK",
    "keywords": "Enum OrderByDirection Enumeration of the ordering criteria for sorting results Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum OrderByDirection Asc Ascending sorting Desc Descending sorting Extension Methods DataModelExtensions.IsPropertyAvailable<OrderByDirection>(Expression<Func<OrderByDirection, Object>>)"
  },
  "api/PnP.Core.QueryModel.OrderByItem.html": {
    "href": "api/PnP.Core.QueryModel.OrderByItem.html",
    "title": "Class OrderByItem | PnP Core SDK",
    "keywords": "Class OrderByItem Defines a single sorting item Inheritance Object OrderByItem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class OrderByItem Properties Direction The direction (Ascending/Descending) for the sorting criteria. Default: Ascending. Declaration public OrderByDirection Direction { get; set; } Property Value OrderByDirection Field The name of the field to sort by Declaration public string Field { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ServiceError.html": {
    "href": "api/PnP.Core.ServiceError.html",
    "title": "Class ServiceError | PnP Core SDK",
    "keywords": "Class ServiceError Error information for a service error Inheritance Object BaseError ServiceError MicrosoftGraphError SharePointRestError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class ServiceError : BaseError Constructors ServiceError(ErrorType, Int32) Declaration public ServiceError(ErrorType type, int httpResponseCode) Parameters ErrorType type Int32 httpResponseCode Properties ClientRequestId Client request id header returned in the response. Declaration public string ClientRequestId { get; } Property Value String Code Graph error code Declaration public string Code { get; } Property Value String HttpResponseCode Http response code that was linked to the service error Declaration public int HttpResponseCode { get; } Property Value Int32 Message Error message that was linked to the service error Declaration public string Message { get; } Property Value String Methods AddAdditionalData(String, Object) Declaration protected void AddAdditionalData(string propertyName, object propertyValue) Parameters String propertyName Object propertyValue Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ServiceException.html": {
    "href": "api/PnP.Core.ServiceException.html",
    "title": "Class ServiceException | PnP Core SDK",
    "keywords": "Class ServiceException Abstract class representing service errors Inheritance Object Exception PnPException ServiceException MicrosoftGraphServiceException SharePointRestServiceException Inherited Members PnPException.Error Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class ServiceException : PnPException, ISerializable Constructors ServiceException() Declaration public ServiceException() ServiceException(String) Declaration public ServiceException(string message) Parameters String message ServiceException(String, Exception) Declaration public ServiceException(string message, Exception innerException) Parameters String message Exception innerException Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.ApiResponse.html": {
    "href": "api/PnP.Core.Services.ApiResponse.html",
    "title": "Struct ApiResponse | PnP Core SDK",
    "keywords": "Struct ApiResponse Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public struct ApiResponse Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.AuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Services.AuthenticationProviderFactory.html",
    "title": "Class AuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Class AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances Inheritance Object AuthenticationProviderFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class AuthenticationProviderFactory : IAuthenticationProviderFactory Constructors AuthenticationProviderFactory(IOptionsMonitor<OAuthAuthenticationProviderOptions>, ILogger<PnPContext>, IServiceProvider) Declaration public AuthenticationProviderFactory(IOptionsMonitor<OAuthAuthenticationProviderOptions> options, ILogger<PnPContext> logger, IServiceProvider serviceProvider) Parameters IOptionsMonitor < OAuthAuthenticationProviderOptions > options ILogger < PnPContext > logger IServiceProvider serviceProvider Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration public IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name Implements IAuthenticationProviderFactory.Create(String) CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration public IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration Implements IAuthenticationProviderFactory.CreateDefault() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.AuthenticationProviderFactoryCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.AuthenticationProviderFactoryCollectionExtensions.html",
    "title": "Class AuthenticationProviderFactoryCollectionExtensions | PnP Core SDK",
    "keywords": "Class AuthenticationProviderFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the AuthenticationProviderFactory service Inheritance Object AuthenticationProviderFactoryCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class AuthenticationProviderFactoryCollectionExtensions Methods AddAuthenticationProviderFactory(IServiceCollection) Declaration public static IServiceCollection AddAuthenticationProviderFactory(this IServiceCollection collection) Parameters IServiceCollection collection Returns IServiceCollection AddAuthenticationProviderFactory(IServiceCollection, Action<OAuthAuthenticationProviderOptions>) Declaration public static IServiceCollection AddAuthenticationProviderFactory(this IServiceCollection collection, Action<OAuthAuthenticationProviderOptions> options) Parameters IServiceCollection collection Action < OAuthAuthenticationProviderOptions > options Returns IServiceCollection"
  },
  "api/PnP.Core.Services.Batch.html": {
    "href": "api/PnP.Core.Services.Batch.html",
    "title": "Class Batch | PnP Core SDK",
    "keywords": "Class Batch Defines a Batch of requests to execute Inheritance Object Batch Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class Batch Constructors Batch() Default public constructor, instantiates a Batch Declaration public Batch() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.FromJson.html": {
    "href": "api/PnP.Core.Services.FromJson.html",
    "title": "Class FromJson | PnP Core SDK",
    "keywords": "Class FromJson Inheritance Object FromJson Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class FromJson Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.html": {
    "href": "api/PnP.Core.Services.html",
    "title": "Namespace PnP.Core.Services | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services Classes AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances AuthenticationProviderFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the AuthenticationProviderFactory service Batch Defines a Batch of requests to execute FromJson MicrosoftGraphClient OAuthAuthenticationProvider OAuthAuthenticationProviderCollectionExtensions OAuthAuthenticationProviderOptions Defines a collection of credential settings for secure connections to the target resources OAuthCertificateConfiguration Public type to define the Authentication based on X.509 Certificate OAuthCredentialManagerConfiguration Public type to define the Authentication based on Credential Manager OAuthUsernamePasswordConfiguration Public type to define the Authentication with Username and Password PnPContext PnP Context class...the glue between the model and the data stores PnPContextFactory Public factory service to create PnPContext object instances PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object PnPContextFactoryOptionsConfiguration Settings SettingsCollectionExtensions SharePointRestClient Client that handles all SharePoint REST requests Structs ApiResponse Interfaces IAuthenticationProvider Defines the public interface that any Authentication Provider must implement IAuthenticationProviderConfiguration Basic interface for all the Authentication Provider configurations IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider IPnPContextFactory Public interface for the injectable service to create an PnPContext ISettings PnP Core SDK settings"
  },
  "api/PnP.Core.Services.IAuthenticationProvider.html": {
    "href": "api/PnP.Core.Services.IAuthenticationProvider.html",
    "title": "Interface IAuthenticationProvider | PnP Core SDK",
    "keywords": "Interface IAuthenticationProvider Defines the public interface that any Authentication Provider must implement Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IAuthenticationProvider Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource HttpRequestMessage request The HttpRequestMessage to authenticate. Returns Task The task to await. Configure(IAuthenticationProviderConfiguration) Configures the Authentication Provider Declaration void Configure(IAuthenticationProviderConfiguration configuration) Parameters IAuthenticationProviderConfiguration configuration The configuration to use GetAccessTokenAsync(Uri, String[]) Declaration Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource String [] scopes Returns Task < String > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.IAuthenticationProviderConfiguration.html": {
    "href": "api/PnP.Core.Services.IAuthenticationProviderConfiguration.html",
    "title": "Interface IAuthenticationProviderConfiguration | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderConfiguration Basic interface for all the Authentication Provider configurations Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IAuthenticationProviderConfiguration Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration Type AuthenticationProviderType { get; } Property Value Type ClientId The ClientId of the application to use for authentication Declaration string ClientId { get; set; } Property Value String Name The Name of the configuration Declaration string Name { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.IAuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Services.IAuthenticationProviderFactory.html",
    "title": "Interface IAuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IAuthenticationProviderFactory Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.IPnPContextFactory.html": {
    "href": "api/PnP.Core.Services.IPnPContextFactory.html",
    "title": "Interface IPnPContextFactory | PnP Core SDK",
    "keywords": "Interface IPnPContextFactory Public interface for the injectable service to create an PnPContext Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IPnPContextFactory Methods Create(String) Creates a new instance of PnPContext based on a provided configuration name Declaration PnPContext Create(string name) Parameters String name Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri) Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider Declaration PnPContext Create(Uri url) Parameters Uri url The URL of the PnPContext as a URI Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance Declaration PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri, String) Creates a new instance of PnPContext based on a provided URL and Authentication configuration name Declaration PnPContext Create(Uri url, string authenticationProviderName) Parameters Uri url The URL of the PnPContext as a URI String authenticationProviderName The name of the Authentication Provider to use to authenticate within the PnPContext Returns PnPContext A PnPContext object based on the provided configuration name Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.ISettings.html": {
    "href": "api/PnP.Core.Services.ISettings.html",
    "title": "Interface ISettings | PnP Core SDK",
    "keywords": "Interface ISettings PnP Core SDK settings Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface ISettings Properties AADTenantId Declaration Guid AADTenantId { get; set; } Property Value Guid DisableTelemetry Declaration bool DisableTelemetry { get; } Property Value Boolean GraphAlwaysUseBeta Declaration bool GraphAlwaysUseBeta { get; } Property Value Boolean GraphCanUseBeta Declaration bool GraphCanUseBeta { get; } Property Value Boolean GraphFirst Declaration bool GraphFirst { get; } Property Value Boolean UserAgent Declaration string UserAgent { get; } Property Value String VersionTag Declaration string VersionTag { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.MicrosoftGraphClient.html": {
    "href": "api/PnP.Core.Services.MicrosoftGraphClient.html",
    "title": "Class MicrosoftGraphClient | PnP Core SDK",
    "keywords": "Class MicrosoftGraphClient Inheritance Object MicrosoftGraphClient Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class MicrosoftGraphClient Constructors MicrosoftGraphClient(HttpClient, ILogger<MicrosoftGraphClient>, ISettings) Declaration public MicrosoftGraphClient(HttpClient client, ILogger<MicrosoftGraphClient> log, ISettings settingsClient) Parameters HttpClient client ILogger < MicrosoftGraphClient > log ISettings settingsClient Properties Client Declaration public HttpClient Client { get; } Property Value HttpClient Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.OAuthAuthenticationProvider.html": {
    "href": "api/PnP.Core.Services.OAuthAuthenticationProvider.html",
    "title": "Class OAuthAuthenticationProvider | PnP Core SDK",
    "keywords": "Class OAuthAuthenticationProvider Inheritance Object OAuthAuthenticationProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class OAuthAuthenticationProvider : IAuthenticationProvider Constructors OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Declaration public OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Declaration public Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource HttpRequestMessage request Returns Task Implements IAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) Configure(IAuthenticationProviderConfiguration) Declaration public void Configure(IAuthenticationProviderConfiguration configuration) Parameters IAuthenticationProviderConfiguration configuration Implements IAuthenticationProvider.Configure(IAuthenticationProviderConfiguration) GetAccessTokenAsync(Uri, String[]) Declaration public Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource String [] scopes Returns Task < String > Implements IAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.OAuthAuthenticationProviderCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.OAuthAuthenticationProviderCollectionExtensions.html",
    "title": "Class OAuthAuthenticationProviderCollectionExtensions | PnP Core SDK",
    "keywords": "Class OAuthAuthenticationProviderCollectionExtensions Inheritance Object OAuthAuthenticationProviderCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class OAuthAuthenticationProviderCollectionExtensions Methods AddOAuthAuthenticationProvider(IServiceCollection) Declaration public static IServiceCollection AddOAuthAuthenticationProvider(this IServiceCollection collection) Parameters IServiceCollection collection Returns IServiceCollection"
  },
  "api/PnP.Core.Services.OAuthAuthenticationProviderOptions.html": {
    "href": "api/PnP.Core.Services.OAuthAuthenticationProviderOptions.html",
    "title": "Class OAuthAuthenticationProviderOptions | PnP Core SDK",
    "keywords": "Class OAuthAuthenticationProviderOptions Defines a collection of credential settings for secure connections to the target resources Inheritance Object OAuthAuthenticationProviderOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class OAuthAuthenticationProviderOptions Properties Configurations Collection of credentials for OAuthAuthenticationProvider Declaration public List<IAuthenticationProviderConfiguration> Configurations { get; } Property Value List < IAuthenticationProviderConfiguration > DefaultConfiguration Defines the name of the default configuration Declaration public string DefaultConfiguration { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.OAuthCertificateConfiguration.html": {
    "href": "api/PnP.Core.Services.OAuthCertificateConfiguration.html",
    "title": "Class OAuthCertificateConfiguration | PnP Core SDK",
    "keywords": "Class OAuthCertificateConfiguration Public type to define the Authentication based on X.509 Certificate Inheritance Object OAuthCertificateConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class OAuthCertificateConfiguration : IAuthenticationProviderConfiguration Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration public Type AuthenticationProviderType { get; } Property Value Type Implements IAuthenticationProviderConfiguration.AuthenticationProviderType Certificate The X.509 Certificate to use for authentication Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.ClientId Name The Name of the configuration Declaration public string Name { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.Name Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.OAuthCredentialManagerConfiguration.html": {
    "href": "api/PnP.Core.Services.OAuthCredentialManagerConfiguration.html",
    "title": "Class OAuthCredentialManagerConfiguration | PnP Core SDK",
    "keywords": "Class OAuthCredentialManagerConfiguration Public type to define the Authentication based on Credential Manager Inheritance Object OAuthCredentialManagerConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class OAuthCredentialManagerConfiguration : IAuthenticationProviderConfiguration Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration public Type AuthenticationProviderType { get; } Property Value Type Implements IAuthenticationProviderConfiguration.AuthenticationProviderType ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.ClientId CredentialManagerName The name of the Windows Credential Manager settings to use Declaration public string CredentialManagerName { get; set; } Property Value String Name The Name of the configuration Declaration public string Name { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.Name Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.OAuthUsernamePasswordConfiguration.html": {
    "href": "api/PnP.Core.Services.OAuthUsernamePasswordConfiguration.html",
    "title": "Class OAuthUsernamePasswordConfiguration | PnP Core SDK",
    "keywords": "Class OAuthUsernamePasswordConfiguration Public type to define the Authentication with Username and Password Inheritance Object OAuthUsernamePasswordConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class OAuthUsernamePasswordConfiguration : IAuthenticationProviderConfiguration Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration public Type AuthenticationProviderType { get; } Property Value Type Implements IAuthenticationProviderConfiguration.AuthenticationProviderType ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.ClientId Name The Name of the configuration Declaration public string Name { get; set; } Property Value String Implements IAuthenticationProviderConfiguration.Name Password The password for authenticating Declaration public SecureString Password { get; set; } Property Value SecureString Username The username for authenticating Declaration public string Username { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContext.html": {
    "href": "api/PnP.Core.Services.PnPContext.html",
    "title": "Class PnPContext | PnP Core SDK",
    "keywords": "Class PnPContext PnP Context class...the glue between the model and the data stores Inheritance Object PnPContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContext : IDisposable Constructors PnPContext(String, ILogger, IAuthenticationProvider, SharePointRestClient, MicrosoftGraphClient, ISettings, TelemetryClient) Public constructor for an SPO context based on target site URL Declaration public PnPContext(string url, ILogger logger, IAuthenticationProvider authenticationProvider, SharePointRestClient sharePointRestClient, MicrosoftGraphClient microsoftGraphClient, ISettings settingsClient, TelemetryClient telemetryClient) Parameters String url The URL of the site as a string ILogger logger Logger instance IAuthenticationProvider authenticationProvider The authentication provider to authenticate against the target site url SharePointRestClient sharePointRestClient SharePoint REST HTTP client MicrosoftGraphClient microsoftGraphClient Microsoft Graph HTTP client ISettings settingsClient TelemetryClient telemetryClient AppInsights client for telemetry work PnPContext(Uri, ILogger, IAuthenticationProvider, SharePointRestClient, MicrosoftGraphClient, ISettings, TelemetryClient) Public constructor for an SPO context based on target site URL Declaration public PnPContext(Uri uri, ILogger logger, IAuthenticationProvider authenticationProvider, SharePointRestClient sharePointRestClient, MicrosoftGraphClient microsoftGraphClient, ISettings settingsClient, TelemetryClient telemetryClient) Parameters Uri uri The URI of the site as a URI ILogger logger Logger instance IAuthenticationProvider authenticationProvider The authentication provider to authenticate against the target site url SharePointRestClient sharePointRestClient SharePoint REST HTTP client MicrosoftGraphClient microsoftGraphClient Microsoft Graph HTTP client ISettings settingsClient TelemetryClient telemetryClient AppInsights client for telemetry work Properties AuthenticationProvider Connected authentication provider Declaration public IAuthenticationProvider AuthenticationProvider { get; } Property Value IAuthenticationProvider CurrentBatch Current batch, used for implicit batching Declaration public Batch CurrentBatch { get; } Property Value Batch GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphClient Connected Microsoft Graph client Declaration public MicrosoftGraphClient GraphClient { get; } Property Value MicrosoftGraphClient GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean HasPendingRequests Are there pending requests to execute (in the case of batching) Declaration public bool HasPendingRequests { get; } Property Value Boolean Logger Connected logger Declaration public ILogger Logger { get; } Property Value ILogger RestClient Connected SharePoint REST client Declaration public SharePointRestClient RestClient { get; } Property Value SharePointRestClient Site Entry point for the Site Object Declaration public ISite Site { get; } Property Value ISite Team Entry point for the Team Object Declaration public ITeam Team { get; } Property Value ITeam Uri Uri of the SharePoint site we're working against Declaration public Uri Uri { get; } Property Value Uri Web Entry point for the Web Object Declaration public IWeb Web { get; } Property Value IWeb Methods Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing ExecuteAsync() Method to execute the current batch Declaration public Task ExecuteAsync() Returns Task The asynchronous task that will be executed ExecuteAsync(Batch) Method to execute a given batch Declaration public Task ExecuteAsync(Batch batch) Parameters Batch batch Batch to execute Returns Task The asynchronous task that will be executed NewBatch() Creates a new batch Declaration public Batch NewBatch() Returns Batch Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactory.html": {
    "href": "api/PnP.Core.Services.PnPContextFactory.html",
    "title": "Class PnPContextFactory | PnP Core SDK",
    "keywords": "Class PnPContextFactory Public factory service to create PnPContext object instances Inheritance Object PnPContextFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactory : IPnPContextFactory Constructors PnPContextFactory(IOptionsMonitor<PnPContextFactoryOptions>, ILogger<PnPContext>, IAuthenticationProviderFactory, SharePointRestClient, MicrosoftGraphClient, ISettings, TelemetryClient) Declaration public PnPContextFactory(IOptionsMonitor<PnPContextFactoryOptions> options, ILogger<PnPContext> logger, IAuthenticationProviderFactory authenticationProviderFactory, SharePointRestClient sharePointRestClient, MicrosoftGraphClient microsoftGraphClient, ISettings settingsClient, TelemetryClient telemetryClient) Parameters IOptionsMonitor < PnPContextFactoryOptions > options ILogger < PnPContext > logger IAuthenticationProviderFactory authenticationProviderFactory SharePointRestClient sharePointRestClient MicrosoftGraphClient microsoftGraphClient ISettings settingsClient TelemetryClient telemetryClient Methods Create(String) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(string name) Parameters String name The name of the SPOContext configuration to use Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(String) Create(Uri) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url) Parameters Uri url The URL of the SPOContext as a URI Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri) Create(Uri, IAuthenticationProvider) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the SPOContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the SPOContext Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri, IAuthenticationProvider) Create(Uri, String) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url, string authenticationProviderName) Parameters Uri url The URL of the SPOContext as a URI String authenticationProviderName The name of the Authentication Provider to use to authenticate within the SPOContext Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri, String) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html",
    "title": "Class PnPContextFactoryCollectionExtensions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service Inheritance Object PnPContextFactoryCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class PnPContextFactoryCollectionExtensions Methods AddPnPContextFactory(IServiceCollection) Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection) Parameters IServiceCollection collection Returns IServiceCollection AddPnPContextFactory(IServiceCollection, Action<PnPContextFactoryOptions>) Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection, Action<PnPContextFactoryOptions> options) Parameters IServiceCollection collection Action < PnPContextFactoryOptions > options Returns IServiceCollection"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptions.html",
    "title": "Class PnPContextFactoryOptions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object Inheritance Object PnPContextFactoryOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptions Properties Configurations Collection of configurations for PnPContextFactory Declaration public List<PnPContextFactoryOptionsConfiguration> Configurations { get; } Property Value List < PnPContextFactoryOptionsConfiguration > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html",
    "title": "Class PnPContextFactoryOptionsConfiguration | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptionsConfiguration Inheritance Object PnPContextFactoryOptionsConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptionsConfiguration Properties AuthenticationProviderName The Name of the Authentication Provider configuration Declaration public string AuthenticationProviderName { get; set; } Property Value String Name The Name of the configuration Declaration public string Name { get; set; } Property Value String SiteUrl The URL of the target SPO Site Declaration public Uri SiteUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Settings.html": {
    "href": "api/PnP.Core.Services.Settings.html",
    "title": "Class Settings | PnP Core SDK",
    "keywords": "Class Settings Inheritance Object Settings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class Settings : ISettings Constructors Settings(ILogger<Settings>, IConfiguration) Declaration public Settings(ILogger<Settings> log, IConfiguration configuration) Parameters ILogger < Settings > log IConfiguration configuration Properties AADTenantId Declaration public Guid AADTenantId { get; set; } Property Value Guid Implements ISettings.AADTenantId DisableTelemetry Declaration public bool DisableTelemetry { get; } Property Value Boolean Implements ISettings.DisableTelemetry GraphAlwaysUseBeta Declaration public bool GraphAlwaysUseBeta { get; } Property Value Boolean Implements ISettings.GraphAlwaysUseBeta GraphCanUseBeta Declaration public bool GraphCanUseBeta { get; } Property Value Boolean Implements ISettings.GraphCanUseBeta GraphFirst Declaration public bool GraphFirst { get; } Property Value Boolean Implements ISettings.GraphFirst UserAgent Declaration public string UserAgent { get; } Property Value String Implements ISettings.UserAgent VersionTag Declaration public string VersionTag { get; } Property Value String Implements ISettings.VersionTag Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.SettingsCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.SettingsCollectionExtensions.html",
    "title": "Class SettingsCollectionExtensions | PnP Core SDK",
    "keywords": "Class SettingsCollectionExtensions Inheritance Object SettingsCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class SettingsCollectionExtensions Methods AddSettings(IServiceCollection) Declaration public static IServiceCollection AddSettings(this IServiceCollection collection) Parameters IServiceCollection collection Returns IServiceCollection"
  },
  "api/PnP.Core.Services.SharePointRestClient.html": {
    "href": "api/PnP.Core.Services.SharePointRestClient.html",
    "title": "Class SharePointRestClient | PnP Core SDK",
    "keywords": "Class SharePointRestClient Client that handles all SharePoint REST requests Inheritance Object SharePointRestClient Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class SharePointRestClient Constructors SharePointRestClient(HttpClient, ILogger<SharePointRestClient>, ISettings) Default Constructor Declaration public SharePointRestClient(HttpClient client, ILogger<SharePointRestClient> log, ISettings settingsClient) Parameters HttpClient client Http Client coming from the .Net http client factory ILogger < SharePointRestClient > log Logger service ISettings settingsClient Settings service Properties Client Http client which needs to be used for making a SharePoint REST call Declaration public HttpClient Client { get; } Property Value HttpClient Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.SharePointRestError.html": {
    "href": "api/PnP.Core.SharePointRestError.html",
    "title": "Class SharePointRestError | PnP Core SDK",
    "keywords": "Class SharePointRestError SharePoint Rest service error Inheritance Object BaseError ServiceError SharePointRestError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code ServiceError.AddAdditionalData(String, Object) BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestError : ServiceError Constructors SharePointRestError(ErrorType, Int32, String) Default constructor for the SharePointRestError error Declaration public SharePointRestError(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a SharePointRestError to a string representation Declaration public override string ToString() Returns String String representation Overrides Object.ToString() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.SharePointRestServiceException.html": {
    "href": "api/PnP.Core.SharePointRestServiceException.html",
    "title": "Class SharePointRestServiceException | PnP Core SDK",
    "keywords": "Class SharePointRestServiceException Microsoft Graph Service exception Inheritance Object Exception PnPException ServiceException SharePointRestServiceException Inherited Members PnPException.Error Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestServiceException : ServiceException, ISerializable Constructors SharePointRestServiceException(ErrorType, Int32, String) Declaration public SharePointRestServiceException(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type Int32 httpResponseCode String response Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a SharePointRestServiceException to a string representation Declaration public override string ToString() Returns String String representation Overrides Exception.ToString() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "articles/consumer/configuring authentication.html": {
    "href": "articles/consumer/configuring authentication.html",
    "title": "Configuring authentication | PnP Core SDK",
    "keywords": "Configuring authentication The PnP Core SDK works with both SharePoint REST as Microsoft Graph in a transparent way, this also means that the authentication model used must work for both. The chosen authentication model is Azure Active Directory (a.k.a. Azure AD), using Azure Active Directory you can define an application and grant it permissions to access Microsoft 365 workloads like SharePoint, Teams,... Configuring your own application is the recommended approach , but you can also use an multi-tenant application that the PnP team created. Both options are detailed in the next chapters I want to configure my own Azure AD application (recommended) Note The current preview supports delegated access tokens only. We are working on extending the SDK to support app-only access tokens. Configuring the application in Azure AD Follow below steps to configure an application in Azure AD: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP Core SDK) and click on Register Copy the Application ID from the Overview page, you'll need this GUID value later on Click on the API Permissions in the Manage left navigation group Click on Add Permissions and add the permissions you want to give to this application. Below list is a recommendation, you can grant less permissions but that might result in some PnP Core SDK calls to fail due getting access denied errors. SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> Sites -> Sites.SearchAll SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Directory -> Directory.AccessAsUser.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on Authentication in the Manage left navigation group Change Default client type to Treat application as public client and hit Save Configuring PnP Core SDK to use the configured application When you're configuring your application to use the PnP Core SDK you will have to configure the PnP Core SDK AuthenticationProviderFactory which allows you to specify one or more IAuthenticationProviderConfiguration implementations. The IAuthenticationProviderConfiguration implementations that support a custom Azure AD applications do have a ClientId property that can be used to configure the Azure AD application to be used. Below snippet shows the configuration of the OAuthCredentialManagerConfiguration : the configuration needs a name, the credential manager entry that contains username/password and the Client ID (or Application ID) of the Azure AD application that you want to use. .AddAuthenticationProviderFactory(options => { options.Configurations.Add(new OAuthCredentialManagerConfiguration { Name = \"CredentialManagerAuthentication\", CredentialManagerName = configuration.GetValue<string>(\"CustomSettings:CredentialManager\"), ClientId = configuration.GetValue<string>(\"CustomSettings:ClientId\"), }); options.DefaultConfiguration = \"CredentialManagerAuthentication\"; }) Using the multi-tenant PnP Azure AD application Azure AD has the concept of multi-tenant applications allowing you to re-use an application created in another Azure AD tenant. The PnP team did setup a general purpose Azure AD application (named \"PnP Office 365 Management Shell\") configured with the needed permissions, and you can reuse this application. It means that you don't need to create your own Azure AD application, instead you simply need to consent permissions to the already created multi-tenant application. Step 1 To consent permissions to the PnP multi-tenant application first update below content URL: replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com. https://login.microsoftonline.com/contoso.onmicrosoft.com/adminconsent?client_id=31359c7f-bd7e-475c-86db-fdb8c937548e&state=12345&redirect_uri=https://aka.ms/sppnp Step 2 Login to your Microsoft 365 tenant (e.g. by browsing to SharePoint Online), open a new browser tab and paste the URL you've just created. Azure AD will eventually ask you to login, and then it will prompt you to consent permissions to the app: Click on Accept to accept the requested permissions. At that point you will be redirected to the PnP Site ( https://aka.ms/sppnp ). You've now successfully registered the PnP multi-tenant application in your Azure AD environment and you can use it with the PnP Core SDK. The PnP Core SDK defaults to this application, so if you're not specifying any Azure AD application details when setting up authentication for the application, then the PnP Core SDK automatically uses the PnP application (application id 31359c7f-bd7e-475c-86db-fdb8c937548e). Note If you get errors during this consent process it's most likely because you are not an Azure AD tenant administrator. Please contact your admins and check with them for further steps. Using the credential manager Currently the only supported option to authenticate to a created Azure AD application is via username and password. To configure this in a secure way it's recommended to setup a credential manager entry. Below steps walk you through the setup on Windows, but a similar credential manager concepts exists on other platforms as well. Click on the Windows Start button in the taskbar and type credential manager . Click on the Credential Manager link. Go to Windows Credentials and click on Add a generic credential . Give the credential a name (e.g. Contoso), a user name (e.g. joe@contoso.onmicrosoft.com) and a password. Hit OK to save. Use the credential manager name (Contoso in this example) in your OAuthCredentialManagerConfiguration setup."
  },
  "articles/consumer/pnp core settings.html": {
    "href": "articles/consumer/pnp core settings.html",
    "title": "Configuring the PnP Core SDK via settings | PnP Core SDK",
    "keywords": "Configuring the PnP Core SDK via settings The PnP Core SDK uses a default configuration and as such you're not required to provide specific settings. However, if you want to change the settings, then providing the custom settings via a settings service (e.g. settings file) is the way to go. Sample settings file Below snippet shows the settings which are used by the PnP Core SDK, you can simply include this snippet in your application settings file next to your custom settings. { \"PnPCore\": { \"UserAgent\": \"ISV|Contoso|ProductX\", \"DisableTelemetry\": false, \"PnPContext\": { \"GraphFirst\": true, \"GraphAlwaysUseBeta\": false, \"GraphCanUseBeta\" : true } }, // Not really library related, but since the library assumes logging is connected it's being shown here \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\" } } } Settings overview Setting Default value Description PnPCore:UserAgent NONISV|SharePointPnP|PnPCoreSDK Value set as user agent when the request is sent to Microsoft 365. PnPCore:DisableTelemetry false Allows to turn off telemetry being sent. Telemetry is used to improve this open source library and it's recommended to keep it on, but you can disable it, if required. PnPCore:PnPContext:GraphFirst true If for a given request the library can choose between a SharePoint REST or a Microsoft Graph call then it will favor the Microsoft Graph call. Settings this to false will prefer SharePoint REST for all SharePoint related API calls. PnPCore:PnPContext:GraphAlwaysUsesBeta false The library by default uses the production v1.0 Microsoft Graph API. Use this setting to default it to the beta Microsoft Graph API. PnPCore:PnPContext:GraphCanUseBeta true When you ask for data that can only be provided via the Microsoft Graph beta API the PnP Core SDK will use the beta endpoint for that specific request. All other requests will still use the v1.0 endpoint. If you set this to false, then any request that requires Microsoft Graph beta will not provide any result. Logging:LogLevel:Default Information Allows you to change log level. See the .Net Logging article for more details."
  },
  "articles/consumer/readme.html": {
    "href": "articles/consumer/readme.html",
    "title": "Getting started with the PnP Core SDK | PnP Core SDK",
    "keywords": "Getting started with the PnP Core SDK The PnP Core SDK is designed to be used in modern .Net development, hence it relies on dependency injection ( generic host ) for it's core services. This implies that before you can actually use the PnP Core SDK you need to configure the needed services. Once that's done you can obtain a PnPContext from the PnPContextFactory and start using the library. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the src\\samples folder The source of the documentation you are reading right now in the docs folder Referencing the PnP Core SDK in your project At this point the PnP Core SDK has not yet been published as a nuget package, so you'll need to reference the SDK as DLL in your solution. You can build the PnP.Core solution and reference the DLL from the projects build output (e.g. src\\sdk\\PnP.Core\\bin\\Debug\\netstandard2.1\\PnP.Core.dll ) or alternatively include the PnP Core project ( src\\PnP.Core\\PnP.Core.csproj ) in your project as a dependency. The latter approach does make it really easy for you to debug PnP Core when you're writing code. Configuring the needed services Below snippet shows how to configure the needed services in a .Net Core console app: it's required to add and configure the AuthenticationProviderFactory and the PnPContextFactory services. Typically you would also include configuration and logging as well. var host = Host.CreateDefaultBuilder() // Set environment to use .UseEnvironment(\"demo\") // you can eventually read it from environment variables // Configure logging .ConfigureServices((hostingContext, services) => { var customSettings = new CustomSettings(); hostingContext.Configuration.Bind(\"CustomSettings\", customSettings); services // Setup PnP authentication providers .AddAuthenticationProviderFactory(options => { // CredentialManager provider options.Configurations.Add(new OAuthCredentialManagerConfiguration { Name = \"CredentialManagerAuthentication\", CredentialManagerName = customSettings.CredentialManager, // You can optionally provide a custom ClientId, or the SDK will use a default one ClientId = customSettings.ClientId, }); // Username + Pwd provider options.Configurations.Add(new OAuthUsernamePasswordConfiguration { Name = \"UsernameAndPasswordAuthentication\", Username = customSettings.UserPrincipalName, Password = customSettings.Password.ToSecureString(), // You can optionally provide a custom ClientId, or the SDK will use a default one ClientId = customSettings.ClientId, }); // Set default provider options.DefaultConfiguration = \"CredentialManagerAuthentication\"; }) // Setup the PnP context factory .AddPnPContextFactory(options => { options.Configurations.Add(new PnPContextFactoryOptionsConfiguration { Name = \"SiteToWorkWith\", SiteUrl = new Uri(customSettings.TargetSiteUrl), AuthenticationProviderName = \"CredentialManagerAuthentication\", }); }); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); In above sample the following configuration file is used: appsettings.demo.json { \"CustomSettings\": { \"TargetSiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"CredentialManager\": \"mycreds\", \"UserPrincipalName\": \"joe@contoso.onmicrosoft.com\", \"Password\": \"password\", }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\" } } } Note To learn more about how to setup authentication check the Configuring authentication article. Obtaining a PnPContext // Start console host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Obtain a PnP Context factory var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); // Use the PnP Context factory to get a PnPContext for the given configuration using (var context = pnpContextFactory.Create(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } } // Cleanup console host host.Dispose(); Using the PnPContext for operations on Microsoft 365 All operations on Microsoft 365 start from the PnPContext instance you've obtained from the PnPContextFactory . Below sample shows a simple get operation that requests data from Microsoft 365 and outputs it to the console: using (var context = pnpContextFactory.Create(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(); Console.WriteLine($\"Title: {web.Title}\"); } Here follows another example that shows how to define which properties need to be loaded while executing the request: var team = await context.Team.GetAsync(p => p.Description, p => p.FunSettings, p => p.DiscoverySettings, p => p.Members); When you see an asynchronous call being used, it means that the call is executed immediately. However, you can easily group multiple requests in a batch and send them in one call to the server via the built in batching support: var web = await context.Web.GetAsync(); var myList = web.Lists.GetByTitle(\"TestList\"); if (myList != null) { // Create three list items and add them via single server request Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", \"PnP Rocks!\" } }; myList.Items.Add(values); myList.Items.Add(values); myList.Items.Add(values); // Send batch to the server await context.ExecuteAsync(); } To update Microsoft 365 you simply update the needed properties in your model and then call UpdateAsync or Update (used for batching): var web = await context.Web.GetAsync(p => p.Lists); var myList = web.Lists.GetByTitle(\"Documents\"); if (myList != null) { myList.Description = $\"Updated on UTC {DateTime.UtcNow}\"; await myList.UpdateAsync(); } Deleting follows a similar pattern, but now you use DeleteAsync or Delete : var web = await context.Web.GetAsync(p => p.Lists); var myList = web.Lists.GetByTitle(\"ListToDelete\"); if (myList != null) { await myList.DeleteAsync(); } If you like, you can also leverage a fluent syntax enriched with LINQ (Language Integrated Query). For example, in the following code excerpt you can see how to write a query for the items of a list. var document = context.Web.Lists.GetByTitle(\"Documents\").Items .Where(i => i.Title == \"Sample Document\") .Load(i => i.Id, i => i.Title) .FirstOrDefault(); if (document != null) { Console.WriteLine($\"Document Title: {document.Title}\"); }"
  },
  "articles/contributor/event handlers.html": {
    "href": "articles/contributor/event handlers.html",
    "title": "Event handlers | PnP Core SDK",
    "keywords": "Event handlers When you add/extend the model, you will have an option to use event handlers. This article lists and explains the available event handlers, providing short samples. Event handler overview Event handler Delegate Description AddApiCallHandler ApiCall AddApiCall(); When you want to implement Add on a model class you need to use this event handler GetApiCallOverrideHandler ApiCallRequest GetApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the get API call that was created based upon the model decoration UpdateApiCallOverrideHandler ApiCallRequest UpdateApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the update API call that was created based upon the model decoration DeleteApiCallOverrideHandler ApiCallRequest DeleteApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the delete API call that was created based upon the model decoration MappingHandler TResult Func<in T, out TResult>(T arg); Use this handler to customize how the JSON received from the server is mapped to the model. Typically used to handle enumerations and special fields PostMappingHandler void Action<in T>(T obj); This handler is fired after the complete JSON to model mapping was done and allows you to perform extra logic using the JSON snippet received from the server ValidateUpdateHandler void ValidateUpdate(ref FieldUpdateRequest fieldUpdateRequest); If you want to perform checks before you allow a property in the model to be updated, then use this event handler Event handlers in the model lifecycle Event handlers fire in a certain order when triggered by an action on the model. In below example a Team is loaded requiring a get request, as such the GetApiCallOverrideHandler fires. Unless the get request is cancelled in the event handler, the server is queried and JSON results are returned. During mapping of the JSON results to the model the MappingHandler is fired for each property for which there's no default mapping. Finally the full JSON to model mapping is done and the PostMappingHandler fires allowing you to perform extra processing if needed. AddApiCallHandler This handler is required when you want to implement Add functionality on a model class. In the handler you use the properties of the model class instance to be added ( DisplayName and Description ) to construct the JSON payload, which you then wrap into the respective Microsoft Graph or SharePoint REST API call. internal partial class TeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = () => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall(ParseApiRequest(baseUri), ApiType.Graph, bodyContent); }; } } GetApiCallOverrideHandler This event handler is meant to be a last resort, it can override/cancel the generated get query. Typically one should not have to do this, but the option is available for special cases like shown in below example where the system prevents getting the Team if the connected SharePoint site collection is not group connected (as it never can have a Team in that case). internal partial class Team { internal Team() { GetApiCallOverrideHandler = (ApiCallRequest api) => { if (!PnPContext.Site.IsPropertyAvailable(p => p.GroupId) || PnPContext.Site.GroupId == Guid.Empty) { api.CancelRequest(\"There is no Microsoft 365 group attached to the current site\"); } return api; }; } } UpdateApiCallOverrideHandler and DeleteApiCallOverrideHandler Manipulating updates and deletes is a more common scenario, especially preventing updates/deletes from happening. In below example, you see how sending an update or delete request to the server for the General channel of a Team is prevented. internal partial class TeamChannel { internal TeamChannel() { UpdateApiCallOverrideHandler = (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Updating the general channel is not allowed.\"); } return apiCallRequest; }; DeleteApiCallOverrideHandler = (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Deleting the general channel is not allowed.\"); } return apiCallRequest; }; } } MappingHandler The MappingHandler is the most commonly used event handler. You'll see a lot of the model and complex type classes implement this handler. The core purpose of this handler is to handle the JSON to model mapping in cases where this is not done automatically. Also note that when you set the UseCustomMapping property of the GraphFieldMapping or SharePointFieldMapping attributes to true, this handler will also be called for those properties. By default the handler will only be called when there's no automatic JSON to model mapping available, for example in the case of enumerations. internal partial class TeamChannel { internal TeamChannel() { MappingHandler = (FromJson input) => { switch (input.TargetType.Name) { case \"TeamChannelMembershipType\": return ToEnum<TeamChannelMembershipType>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; } } PostMappingHandler This handler fires after the received JSON has been fully processed. You get the processed JSON as a string for additional needs. internal Web() { PostMappingHandler = (string json) => { // implement post mapping handler, in case you want to do extra data loading/mapping work }; } ValidateUpdateHandler Validating properties being updated is a common use case. Sometimes you want to prevent certain model properties from being updated, or you want to \"rewrite\" the updated value. In below example updating model properties for the General Team channel is prevented. internal partial class TeamChannel { internal TeamChannel() { // Validation handler to prevent updating the general channel ValidateUpdateHandler = (ref PropertyUpdateRequest propertyUpdateRequest) => { // Prevent setting all values on the general channel if (DisplayName == \"General\") { propertyUpdateRequest.CancelUpdate(\"Updating the general channel is not allowed.\"); } }; } }"
  },
  "articles/contributor/extending the model - Microsoft Graph.html": {
    "href": "articles/contributor/extending the model - Microsoft Graph.html",
    "title": "Extending the model for Microsoft Graph | PnP Core SDK",
    "keywords": "Extending the model for Microsoft Graph The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the Microsoft Graph API. Configuring model classes Public model (interface) decoration For model classes that are linq queriable one needs to link the concrete (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(TeamChannel))] public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelUpdate, IDataModelDelete { // Ommitted for brevity } Class decoration Each model class needs to have a GraphType attribute which is defined on the coded model class (e.g. Team.cs): [GraphType(Uri = \"teams/{Site.GroupId}\")] internal partial class Team { // Ommitted for brevity } When configuring the GraphType attribute for Microsoft Graph you need to set the attribute properties: Property Required Description Uri Yes Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Id No Defines the Microsoft graph object field which serves as unique id for the object. Typically this field is called id and that's also the default value, but you can provide another value if needed. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the Microsoft Graph field containing these dynamic properties is not named Values . Beta No Defines that a model can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint then this model will not be populated. Property decoration The property level decoration is done using the GraphProperty and KeyProperty attributes. Each model instance requires to have an override of the Key property and that Key property must be decorated with the KeyProperty attribute which specifies which of the actual fields in the model must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the GraphProperty attribute is only required for special cases. Since the properties are defined in the generated model class (e.g. Web.gen.cs and Teams.gen.cs) the decoration via attributes needs to happen in this class as well. // In graph the fieldname is \"name\", whereas in the model the name is \"Title\" [GraphProperty(\"name\")] public string Title { get => GetValue<string>(); set => SetValue(value); } // Mark the property that serves as Key field // (used to ensure there are no duplicates in collections), // use a JsonPath to get the specific value you need [GraphProperty(\"sharepointIds\", JsonPath = \"webId\")] public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } // Define a collection as expandable [GraphProperty(\"lists\", Expandable = true)] public IListCollection Lists { get { if (!HasValue(nameof(Lists))) { var lists = new ListCollection { PnPContext = this.PnPContext, Parent = this, }; SetValue(lists); } return GetValue<IListCollection>(); } } // Configure an additional query to load this model class, this is a non expandable collection [GraphProperty(\"channels\", ExpandByDefault = true, Get = \"teams/{Site.GroupId}/channels\")] public ITeamChannelCollection Channels { get { if (!HasValue(nameof(Channels))) { var channels = new TeamChannelCollection { PnPContext = this.PnPContext, Parent = this, }; SetValue(channels); } return GetValue<ITeamChannelCollection>(); } } // Set the keyfield for this model class [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the Microsoft Graph fieldname differs from the model property name. Since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from Microsoft Graph is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). Expandable No Defines that a collection is expandable, meaning it can be loaded via the $expand query parameter and used in the lambda expression in Get and GetAsync operations. ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. Get No Sometimes it is not possible to load the complete model via a single Microsoft Graph request, often this is the case with collections (so the collection is not expandable). In this case you need to explain how to load the collection via specifying the needed query. See model tokens to learn more about the possible tokens you can use. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Beta No Defines that a model property can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint, then this model property will not be populated. Configuring complex type classes Class decoration Each complex type class does require a GraphType attribute which is defined on the generated complex type class (e.g. TeamFunSettings.gen.cs): [GraphType] internal partial class TeamFunSettings : BaseComplexType<ITeamFunSettings>, ITeamFunSettings { // Ommitted for brevity } Since the complex type class is not queried independently, there is no need to further define properties on the GraphType attribute. Property decoration The property level decoration is done using the GraphProperty attribute. For most properties you do not need to set this attribute, it's only required for special cases. Since the properties are defined in the generated model class (e.g. TeamFunSettings.gen.cs) the decoration via attributes needs to happen in this class as well. Since complex types are not directly queried and are not used in collections only a few of the GraphProperty properties make sense to be used. Property Required Description FieldName Yes Use this property when the Microsoft Graph fieldname differs from the model property name. Since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from Microsoft Graph is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Beta No Defines that a model property can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint, then this model property will not be populated. Configuring collection classes Collection classes do not have attribute based decoration. Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via three methods: An async method A regular method A regular method that allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. ITeamChannelCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of Team Channels /// </summary> public interface ITeamChannelCollection : IDataModelCollection<ITeamChannel> { /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddAsync(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(Batch batch, string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null); } Implementation of the interface in the coded collection class (e.g. TeamChannelCollection.cs): internal partial class TeamChannelCollection { /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddAsync(string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } var newChannel = AddNewTeamChannel(); // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return await newChannel.AddAsync().ConfigureAwait(false) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(Batch batch, string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } var newChannel = AddNewTeamChannel(); // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return newChannel.Add(batch) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null) { return Add(PnPContext.CurrentBatch, name, description); } } And finally you'll see the actual add logic being implemented in the coded model class (e.g. TeamChannel.cs) via implementing the AddApiCallHandler : internal partial class TeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = () => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall(ParseApiRequest(baseUri), ApiType.Graph, bodyContent); }; } }"
  },
  "articles/contributor/extending the model - SharePoint REST.html": {
    "href": "articles/contributor/extending the model - SharePoint REST.html",
    "title": "Extending the model for SharePoint REST | PnP Core SDK",
    "keywords": "Extending the model for SharePoint REST The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph and/or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the SharePoint REST API. Configuring model classes Public model (interface) decoration For model classes that are linq queriable one needs to link the concrete (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelUpdate, IDataModelDelete { // Ommitted for brevity } Class decoration Each model class that uses SharePoint REST does need to have a SharePointType attribute which is defined on the coded model class (e.g. List.cs): [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] internal partial class List { // Ommitted for brevity } When configuring the SharePointType attribute for SharePoint REST you need to set attribute properties: Property Required Description Type Yes Defines the SharePoint REST type that maps with the model class. Each model that requires SharePoint REST requires this attribute, hence the type is requested via the attribute constructor. Uri Yes Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the SharePoint REST field containing these dynamic properties is not named Values . Property decoration The property level decoration is done using the SharePointProperty and KeyProperty attributes. Each model instance does require to have a override of the Key property and that Key property must be decorated with the KeyProperty attribute, which specifies the actual fields in the model that must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the SharePointProperty attribute is only needed whenever it makes sense. For most properties you do not need to set this attribute, it's only required for special cases. Since the properties are defined in the generated model class (e.g. List.gen.cs) the decoration via attributes needs to happen in this class as well. // Configure the SharePoint REST field used to populate this model property [SharePointProperty(\"DocumentTemplateUrl\")] public string DocumentTemplate { get => GetValue<string>(); set => SetValue(value); } // Define a collection as expandable [SharePointProperty(\"Items\", Expandable = true)] public IListItemCollection Items { get { if (!HasValue(nameof(Items))) { var items = new ListItemCollection { PnPContext = this.PnPContext, Parent = this }; SetValue(items); } return GetValue<IListItemCollection>(); } } // Set the keyfield for this model class [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the SharePoint REST fieldname differs from the model property name, since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from SharePoint REST is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). Expandable No Defines that a collection is expandable, meaning it can be loaded via the $expand query parameter and used in the lambda expression in Get and GetAsync operations. ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Configuring complex type classes Complex type classes are not used when the model is populated via SharePoint REST. Configuring collection classes Collection classes do not have attribute based decoration. Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via three methods: An async method A regular method A regular method that allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class. The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. IListCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, ISupportPaging { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, int templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList Add(Batch batch, string title, int templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList Add(string title, int templateType); } Implementation of the interface in the coded collection class (e.g. ListCollection.cs): internal partial class ListCollection { public IList Add(string title, int templateType) { return Add(PnPContext.CurrentBatch, title, templateType); } public IList Add(Batch batch, string title, int templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = AddNewList(); newList.Title = title; newList.TemplateType = templateType; return newList.Add(batch) as List; } public async Task<IList> AddAsync(string title, int templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = AddNewList(); newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } } And finally you'll see the actual add logic being implemented in the coded model class (e.g. List.cs) via implementing the AddApiCallHandler : internal partial class List { /// <summary> /// Class to model the Rest List Add request /// </summary> internal class ListAdd: RestBaseAdd<IList> { public int BaseTemplate { get; set; } public string Title { get; set; } internal ListAdd(BaseDataModel<IList> model, int templateType, string title) : base(model) { BaseTemplate = templateType; Title = title; } } internal List() { // Handler to construct the Add request for this list AddApiCallHandler = () => { return new ApiCall($\"_api/web/lists\", ApiType.Rest, JsonSerializer.Serialize(new ListAdd(this, TemplateType, Title))); }; } }"
  },
  "articles/contributor/extending the model.html": {
    "href": "articles/contributor/extending the model.html",
    "title": "Extending the model - step by step guidance | PnP Core SDK",
    "keywords": "Extending the model - step by step guidance Extending the model is a very common type of work, especially in the early days of this SDK. This page will walk you through the needed steps, but before engaging it's recommended that you've read this article: The PnP Core SDK model . Step 1: Define the public model Step 1.1: Create the interface(s) The public model is an interface and lives in the Public folder. So when extending the SharePoint model you would create the new interface in for example Model\\SharePoint\\Core\\Public or in Model\\SharePoint\\Navigation\\Public . If you feel there's a need to add a new sub level (e.g. Core, Navigation, etc) then you can do that. Key things to check are: Your interface(s) are in the Public folder Your interface(s) are public (e.g. public interface IWeb ) and follow the standard interface naming convention (so starting with an I) Your interface(s) implement the needed base interfaces (see The PnP Core SDK model for more details). At a minimum a model class implements the IDataModel<> interface and a collection implements the IDataModelCollection<> interface Your interface(s) namespace is reflects the top level model folder (e.g. all SharePoint interfaces live in the PnP.Core.Model.SharePoint namespace) Your interface(s) have tripple slash comments explaining their purpose Step 1.2: Add the properties Once the interface is created you need to add properties to it, the properties you want to add are quite often inspired by what the called API's return. So if the API you plan to call to populate this model returns a string field with name FieldA you would want to add a property for it: public string FieldA { get; set; } . Key things to check are: The added properties are public properties The added properties have a getter and a setter, unless the property is model collection (e.g. public IListCollection Lists { get; } in IWeb.cs ) The properties are simple .Net types, enums (see below), complex types or collections of already defined model classes or complex types. See (see The PnP Core SDK model ) for more details Properties have tripple slash comments explaining their purpose Step 2: Define the internal model Once you've defined the public interface the next step is defining the internal classes that implement the created interface(s). These internal classes live at the same level as your interface classes but then in the Internal folder instead of the Public folder. So if the interface lives in the Model\\SharePoint\\Core\\Public folder then the respective internal class lives in the Model\\SharePoint\\Core\\Internal folder. At this moment the internal classes are split into 2 partial classes: there's a model.cs and a model.gen.cs class. Overtime we might opt to combine these classes into a single class, but for now it's recommended to implement 2 classes. Step 2.1: Create the model.gen.cs class The model.gen.cs class contains the code that in the future could be generated, which are the properties. Key things to check are: It's an internal partial class, e.g. internal partial class Web The class name is aligned to the interface name (e.g. IWeb and Web ) The namespace is the same as the one used for the interface The class implements the needed base classes and interfaces: A model class typically implements BaseDataModel<Interface> and the public Interface A collection class BaseDataModelCollection<Interface> and the public Collection Interface The used interface needs to be implemented, which means all the properties defined in the interface will be added: Properties are public Properties use the GetValue<> base class method for getting Properties use the SetValue base class method for setting Collection properties have specific get implementations, check The PnP Core SDK model ) for more details Step 2.2: Create the model.cs class The model.cs contains the custom code, so code that could not be generated. Key things to check are: It's an internal partial class, e.g. internal partial class Web The class name is aligned to the interface name (e.g. IWeb and Web ) The namespace is the same as the one used for the interface Step 3: Decorate the model to enable create/read/update/delete functionality With step 1 and 2 done you've a model definition, but there's no behaviour yet. To bring the model to live you'll need to decorate it with class and property attributes. Depending on whether you're targeting SharePoint REST API's or Microsoft Graph API's you would use different attributes to decorate the model: Decorating the model for SharePoint REST API's Decorating the model for Microsoft Graph API's Important If you're extending the SharePoint model and there's both a Microsoft Graph and a SharePoint REST API available then start with implementing the model using SharePoint REST. Once that works you can add additional Microsoft Graph based decoration. Step 4: Add additional functionality At this point you should have a working model that can be used to read data and depending on the implementation also supports adding, updating and deleting. The power of the SDK however will not just be the model, but also the \"rich\" extensions on top of it. The extensions can be implemented as methods on the model, e.g. you could imagine a UploadFile method on the ITeamChannel model. Step 5: Write test cases Quality is key aspect of this library and test cases do help to guarantee quality. See the Writing test cases article to learn more about how to do that."
  },
  "articles/contributor/model tokens.html": {
    "href": "articles/contributor/model tokens.html",
    "title": "Model tokens | PnP Core SDK",
    "keywords": "Model tokens Introduction When decorating model classes and properties via attributes, often you need to define an API request. To ensure that these API requests offer the needed flexibility, you can use tokens in the URL request definition. Tokens are embedded between curly brackets. Below snippet shows some samples in which tokens are used: // Site.GroupId token to grab the id of the Office 365 group connected to the current site [GraphType(Uri = \"teams/{Site.GroupId}\")] [GraphProperty(\"installedApps\", Get = \"teams/{Site.GroupId}/installedapps?expand=TeamsApp\")] // Parent.GraphId to get Microsoft Graph Id value of the parent class instance of the model // GraphId to get the If value of the model class instance [GraphType(Uri = \"teams/{Parent.GraphId}/channels/{GraphId}\")] // Id property to get the SharePoint REST Id value of the model class instance [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\")] // Web.GraphId to get the Microsoft Graph Id value of the SharePoint Web model instance of the current PnPContext instance [GraphProperty(\"items\", Get = \"/sites/{Web.GraphId}/lists/{GraphId}/items?expand=fields\")] Model tokens that can be used Token Description {Id} Value of the SharePoint Id property of the current model instance (e.g. List). {Parent.Id} Value of the SharePoint Id property of the current model's parent instance (e.g. Web for a List --> ListCollection is skipped in this approach). {GraphId} Value of the Microsoft Graph Id property of the current model instance (e.g. TeamChannel). {Parent.GraphId} Value of the Microsoft Graph Id property of the current model's parent instance (e.g. Team for a TeamChannel --> TeamChannelCollection is skipped in this approach). {Site.GroupId} Id value of the Microsoft 365 Group connected to the Site loaded in the current PnPContext (Id is the same for SharePoint REST as Microsoft Graph usage). {Site.Id} SharePoint Id value of the Site loaded in the current PnPContext. {Web.Id} SharePoint Id value of the Web loaded in the current PnPContext. {Web.GraphId} Microsoft Graph Id value of the Web loaded in the current PnPContext."
  },
  "articles/contributor/readme.html": {
    "href": "articles/contributor/readme.html",
    "title": "The PnP Core SDK model | PnP Core SDK",
    "keywords": "The PnP Core SDK model The model in PnP Core SDK is what the SDK users use to interact with Microsoft 365: it defines the model classes (e.g. List), their fields (Title, Description,...) and the their operations (e.g. Get). This model has a public part (interfaces) and an implementation (internal, partial classes). In order to translate the model into respective SharePoint REST and/or Microsoft Graph v1.0 or beta queries the model needs to be decorated with attributes. These attributes drive the needed API calls to Microsoft 365 and the serialization of returned responses (JSON) into the model. As a contributor, extending and enriching the model is how you provide functionality to the developers that will be using this SDK . Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the src\\samples folder The source of the documentation you are reading right now in the docs folder General model principles The model design principles are agnostic to whether the model will be populated via a SharePoint REST or Microsoft Graph call, and therefore starting here to understand the general model principles is advised. Once you understand the model design principles you can learn more about how to decorate the model to work with either SharePoint REST and/or Microsoft Graph. Below picture gives an overview of the used classes in the model based on the Team model implementation: In the model there are 3 types of classes: The majority of the model is built from model classes Model classes typically use simple .Net types or enumerations as type for their properties, but sometimes a complex type is needed which is represented via a complex type class Model classes often live in a collection, so we do have model collection classes A special case is complex type collections, they can be used in collections and the collection will then be a regular .Net List of model collection classes . Each of these classes has a public model implemented via interfaces and an internal model implemented via internal partial classes. Model classes The model classes are the most commonly used classes in our domain model as they represent a Microsoft 365 object that can be queried via either the SharePoint REST or the Microsoft Graph interface. Samples of model classes are Web, Team, List,... Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint List /// <summary> /// Public interface to define a List object of SharePoint Online /// </summary> [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelUpdate, IDataModelDelete { /// <summary> /// The Unique ID of the List object /// </summary> public Guid Id { get; set; } /// <summary> /// Gets or sets the list title /// </summary> public string Title { get; set; } /// <summary> /// Gets or sets the description of the list /// </summary> public string Description { get; set; } // Other properties left for brevity } Each public model: Uses a public interface (e.g. IList in our example) with public fields Has inline documentation on the model class and fields Always implements the IDataModel<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IDataModelUpdate interface whenever update functionality in needed on this model class Optionally implements the IDataModelDelete interface whenever delete functionality is needed on this model class The fields in the model use either basic .Net data types, enumerations, other model/collection types or so called complex types: // Simple .Net type public string Title { get; set; } // Enum public ListReadingDirection Direction { get; set; } // Other model/collection types public IListItemCollection Items { get; } // Complex types (sample comes from the Team model class) public ITeamFunSettings FunSettings { get; set; } Internal implementation The internal model implementation is what brings the public model to life: this split approach ensures that library consumers only work with the public model, and as such the library implementation can be updated without breaking the public contract with library consumers. For the internal model class implementation we've opted to use internal partial classes: A Model.gen.cs class for semi-generated model class code A Model.cs class for coded model class code Here's a snippet of the List.gen.cs class: internal partial class List : BaseDataModel<IList>, IList { public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } [GraphProperty(\"displayName\")] public string Title { get => GetValue<string>(); set => SetValue(value); } [GraphProperty(\"description\")] public string Description { get => GetValue<string>(); set => SetValue(value); } // Other properties left for brevity [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } } Each generated model class: Inherits from the BaseDataModel<TModel> class and implements TModel Is an internal , partial class Has public properties that use the GetValue and SetValue inherited methods to get and set property values Has a Key property override which can be used to set/get the key value. The Key is used to organize objects in collections Has property attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Here's a snippet of the List.cs class: [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\")] internal partial class List { public List() { MappingHandler = (FromJson input) => { // Handle the mapping from json to the domain model for the cases which are not generically handled switch (input.TargetType.Name) { case \"ListExperience\": return ToEnum<ListExperience>(input.JsonElement); case \"ListReadingDirection\": return ToEnum<ListReadingDirection>(input.JsonElement); case \"ListTemplateType\": return JsonMappingHelper.ToEnum<ListTemplateType>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; // Handler to construct the Add request for this list AddApiCallHandler = () => { return new ApiCall($\"_api/web/lists\", ApiType.Rest, JsonSerializer.Serialize(new ListAdd(this, TemplateType, Title))); }; } } Each coded model class: Is an internal , partial class Does have a public default constructor Does not inherit from another class (the inheriting is done in the Model.gen.cs partial class) Contains class level attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Can implement event handlers which are used to (see the Event Handlers page for more details): Optionally customize the JSON to Model mapping via the MappingHandler = (FromJson input) handler Implement the API call for doing an Add operation via the AddApiCallHandler = () handler Optionally implement API call overrides that allow you to update the generated API call before it's send off to the server. There are these handlers: GetApiCallOverrideHandler = (ApiCall apiCall) , UpdateApiCallOverrideHandler = (ApiCall apiCall) and DeleteApiCallOverrideHandler = (ApiCall apiCall) Optionally implement property validation (prevent property updates, alter values) via the ValidateUpdateHandler = (ref FieldUpdateRequest fieldUpdateRequest) handler Model specific methods can be foreseen. These methods provide additional operations on the model class Complex type classes Complex type classes are used to represent types which are too complex for simple .Net type or enumeration, but on the other hand not complex enough to be queried independently via an API call. A good example of this are the TeamFunSettings : when querying for a Team you'll get the TeamFunSettings in the response, but there's no API to directly query TeamFunSettings as such. Public model Like with all our public models, the complex type classes also use interfaces. /// <summary> /// Public interface to define the fun settings for a Team /// </summary> public interface ITeamFunSettings: IComplexType { /// <summary> /// Defines whether the Giphy are allowed in the Team /// </summary> public bool AllowGiphy { get; set; } /// <summary> /// Defines the Giphy content rating (strict or moderate) /// </summary> public TeamGiphyContentRating GiphyContentRating { get; set; } /// <summary> /// Defines whether the stickers and meme are allowed in the Team /// </summary> public bool AllowStickersAndMemes { get; set; } /// <summary> /// Defines whether the custom memes are allowed in the Team /// </summary> public bool AllowCustomMemes { get; set; } } /// <summary> /// Giphy content rating for giphies being used in a team /// </summary> public enum TeamGiphyContentRating { Moderate, Strict } Each public model for a Complex Type class: Uses a public interface (e.g. ITeamFunSettings in our example) with public properties Has inline documentation on the class and properties Always implements the IComplexType interface The properties in the model use either basic .Net data types, other complex types or enumerations: // Basic .Net type public bool AllowGiphy { get; set; } // Enumeration public TeamGiphyContentRating GiphyContentRating { get; set; } Internal implementation For the internal complex type class implementation we've opted to use an internal partial class: A ComplexType.gen.cs class for semi-generated complex type class code Here's a snippet of the TeamFunSettings.gen.cs class: [GraphType] internal partial class TeamFunSettings : BaseComplexType<ITeamFunSettings>, ITeamFunSettings { public TeamFunSettings() { MappingHandler = (FromJson input) => { switch (input.TargetType.Name) { case \"TeamGiphyContentRating\": return ToEnum<TeamGiphyContentRating>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; } public bool AllowGiphy { get => GetValue<bool>(); set => SetValue(value); } public TeamGiphyContentRating GiphyContentRating { get => GetValue<TeamGiphyContentRating>(); set => SetValue(value); } public bool AllowStickersAndMemes { get => GetValue<bool>(); set => SetValue(value); } public bool AllowCustomMemes { get => GetValue<bool>(); set => SetValue(value); } } Each generated complex model class: Inherits from the BaseComplexType<TModel> class and implements TModel Is an internal , partial class Has the GraphType and/or the SharePointType class attribute Has public properties that use the GetValue and SetValue inherited methods to get and set property values Possibly has property attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Can implement event handlers which are used to (see the Event Handlers page for more details): Optionally customize the JSON to Model mapping via the MappingHandler = (FromJson input) handler Optionally implement property validation (prevent property updates, alter values) via the ValidateUpdateHandler = (ref PropertyUpdateRequest propertyUpdateRequest) handler Collection classes Collection classes contain zero or more model class instances, so for example the ListCollection will contain zero or more List model class instances. Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint ListCollection /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> public interface IListCollection : IDataModelCollection<IList>, IQueryable<IList>, ISupportPaging { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, int templateType); // Other methods ommitted for brevity } Each public model interface for a Collection class: Uses a public interface (e.g. IListCollection in our example) with optionally public methods Has inline documentation on the model class and methods Always implements the IDataModelCollection<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IQueryable<TModel> interface where TModel is the actual interface (e.g. IList in above sample) whenever the model can be queried using linq queries Optionally implements the ISupportPaging interface whenever the data in the collection can be retrieved from the server via paging Optionally a collection interface defines methods which add behavior. Internal implementation For the internal collection class implementation we've opted to use internal partial classes: A Collection.gen.cs class for semi-generated collection class code A Collection.cs class for coded collection class code Here's a snippet of the ListCollection.gen.cs class: internal partial class ListCollection : QueryableDataModelCollection<IList>, IListCollection { [Browsable(false)] public override IList Add() { return AddNewList(); } [Browsable(false)] internal override IList New() { return NewList(); } private List AddNewList() { var newList = NewList(); this.items.Add(newList); return newList; } private List NewList() { var newList = new List { PnPContext = this.PnPContext, Parent = this, }; return newList; } } Each generated collection class: Inherits from either the BaseDataModelCollection<TModel> for regular collections or from the QueryableDataModelCollection<TModel> class for linq queriable collections and implements the previously created collection interface (e.g. IListCollection ) Is an internal , partial class Overrides the CreateNew() base class methods Here's a snippet of the ListCollection.cs class: internal partial class ListCollection { // Other methods ommitted for brevity public async Task<IList> AddAsync(string title, int templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = AddNewList(); newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } // Other methods ommitted for brevity } Each coded collection class: Is an internal , partial class Does not inherit from another class (the inheriting is done in the Collection.gen.cs partial class) Contains the implementation of the methods defined in the public interface Complex type collections Complex type classes are used to represent types which are too complex for simple .Net type or enumeration, but on the other hand not complex enough to be queried independently via an API call. Sometimes you need a collection of complex type classes, which can be released via the List .Net collection class. Public model The complex type collection is List of complex types as shown in below example. Properties that are a complex type collection should only support a property get . public interface ITeamChatMessage : IDataModel<ITeamChatMessage> { // Other properties left for brevity /// <summary> /// Reactions for this chat message (for example, Like). /// </summary> public List<ITeamChatMessageReaction> Reactions { get; } /// <summary> /// List of entities mentioned in the chat message. Currently supports user, bot, team, channel. /// </summary> public List<ITeamChatMessageMention> Mentions { get; } // Other properties left for brevity } Internal implementation For the internal complex type class collection implementation you need to update the generated partial class of the model class having the collection: A Model.gen.cs class for semi-generated complex type class code Here's a snippet of the TeamChatMessage.gen.cs class: internal partial class TeamChatMessage : BaseDataModel<ITeamChatMessage>, ITeamChatMessage { // Other properties left for brevity public List<ITeamChatMessageReaction> Reactions { get { if (!HasValue(nameof(Reactions))) { SetValue(new List<ITeamChatMessageReaction>()); } return GetValue<List<ITeamChatMessageReaction>>(); } } public List<ITeamChatMessageMention> Mentions { get { if (!HasValue(nameof(Mentions))) { SetValue(new List<ITeamChatMessageMention>()); } return GetValue<List<ITeamChatMessageMention>>(); } } // Other properties left for brevity } Each generated complex model class that contains complex type collections: Uses a List<> of the complex type class Implements the getter as shown in the example. It's important that the HasValue , SetValue , and GetValue methods are used to ensure the change tracking can detect changed values Decorating the model The model, collections and complex type classes you create can be populated via either SharePoint REST queries, Microsoft Graph queries or both. Depending on the needed query approach you'll need to decorate the model classes and/or fields with properties. It's these properties that drive the automatic query generation . When you populate your model via SharePoint REST queries then continue here , in case the model is populated via Microsoft Graph continue here ."
  },
  "articles/contributor/writing documentation.html": {
    "href": "articles/contributor/writing documentation.html",
    "title": "Writing documentation | PnP Core SDK",
    "keywords": "Writing documentation The documentation system is based on DocFX , and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . To extend documentation you can: Author articles Write inline code documentation via the tripple slash comments Once you've made changes to the documentation, then these changes are not immediatly reflected in the published documentation. In fact, you need to run the DocFX build and to publish the resulting content. Note Currently documentation is refreshed manually but we're looking into automating this in the future. Writing articles Articles are at the core of the PnP Core SDK documentation and they live in the docs\\articles folder. Articles are written in DocFX Flavored Markdown , which is an extension on top of GitHub flavored markdown. Articles target either the library consumer or the library contributor, hence they should be added to the consumer or contributor folder respectively. When an article requires images, then all images are added in the docs\\images folder. You can eventually organize images in sub-folders of the docs\\images folder. If you want to show your article in the table of contents, then you need to make the needed changes in toc.yml , which you find in the root of the docs folder. Writing inline code documentation Documentation written in the code files themselves is used to generate the Api Documentation and depends on docfx parsing the tripple slash comments that you add to the code. Below resources help you get started: Tripple slash (also called XML documents) commenting in .Net code files DocFX support for tripple slash comments"
  },
  "articles/contributor/writing tests.html": {
    "href": "articles/contributor/writing tests.html",
    "title": "Writing test cases | PnP Core SDK",
    "keywords": "Writing test cases Test cases are a crucial part of the pnp core sdk as they help ensuring code quality and provide feedback to contributors on how well their changes are working. All new contributions must be convered by test cases unless the added functionality is already somehow covered by existing test cases. Setting up your environment to run the tests cases If you want to use and extend these unit tests then you'll need to do a simple onetime setup: Go to the test project folder (src\\sdk\\PnP.Core.Test) Copy env.sample to env.txt Open env.txt and put as content the value mine (or another name in case you want to use other test environment names) Open appsettings.mine.json and update the url's and accounts to match with those available in your tenant. The test system requires that you setup the following sites (optionally use setuptestenv.ps1 to help create the needed sites): A modern, group connected, team site (recommended name is pnpcoresdktestgroup ) which was teamified and which has a sub site (recommended name is subsite ) A modern communication site (recommended name is pnpcoresdktest ) which has a sub site (recommended name is subsite ) That should be it. Happy testing! Running the existing tests in offline mode The test model runs tests by default in an offline modus. This means that tests run really quick and that they should always work, even if you are offline (not connected to the Internet network). There are just few tests that forcibly require to be executed online, and those will fail when you are offline. After you've setup your environment for testing you should open the Visual Studio Test Explorer and click on the Run all tests button to verify that all tests run successfully on your computer. Authoring new test cases Where do I put my test case? All test cases belong to the PnP.Core.Test project and generally speaking the test cases will either be linked to extending the model or linked to the \"core\" part that handles the interaction with SharePoint or Microsoft Graph. For model related test cases, please add them to existing test classes in the respective model folders: SharePoint model tests go into the SharePoint folder. You either create a new file with test cases or add your test into an existing file. Teams model tests go into the Teams folder. You either create a new file with test cases or add your test into an existing file. Azure Active Directory model tests go into the AzureActiveDirectory folder. You either create a new file with test cases or add your test into an existing file If your test extends an already tested model then most likely you'll be able to add your test to one of the existing test classes. When you add \"core\" tests these will need to be added in the Base folder for core tests or in the QueryModel folder for linq tests. Anotomy of a typical test file and test case It's easier to learn this by looking at a sample: [TestClass] public class GetTests { [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test //TestCommon.Instance.Mocking = false; } #region Tests that use REST to hit SharePoint [TestMethod] public async Task GetSinglePropertyViaRest() { //TestCommon.Instance.Mocking = false; using (var context = TestCommon.Instance.GetContext(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } } All test classes will have a TestFixtureSetup static method which is marked as class initializer. Using this method you can turn all tests in a given class from offline testing to online testing (so testing without using the mock data). Looking at the test method itself you'll notice that: To create a PnPContext the test cases uses the TestCommon.Instance.GetContext method: it's important to use this method as this one is hooked up to the configuration you specified plus it will deliver a context that understands how to work with mock data. Uncommenting the TestCommon.Instance.Mocking = false; line can be used to put this specific test in online mode: when you start developing your test you'll have do that (as you initially don't have mock data) Mocking of server responses in tests The PnP Core SDK tests use a custom built mocking system which essentially simply saves server responses when running in online mode. When running in offline mode (so when mocking data) the saved server responses are used to mock the server response. All of this works automatically and can be turned on/off by setting the TestCommon.Instance.Mocking property to true or false (see also the FAQ at the end of this page to learn more). When running in online mode each response for a server request will be stored as a file in a sub folder of the current test class. This folder is always named MockData and has a sub folder per test class, which ensures that mocking files for a given test can be easily identified. The filename uses the following pattern {testname}-{context order}-{sequence}.response . Steps to create a test case If you follow below steps you'll be creating test cases according to the PnP Core SDK guidelines: Find the right location to add your test, either use an existing file or create a new test file Add below test to get started [TestMethod] public async Task NameOfYourTestMethod() { TestCommon.Instance.Mocking = false; using (var context = TestCommon.Instance.GetContext(TestCommon.TestSite)) { // here comes your actual test code } } Write your test with mocking turned off Once your test is ready delete the generated mock data files (see the .response files in the MockData folder) and run your test once more to regenerate them. This step ensures that no stale mocking files will be checked in. Turn mocking on (commenting the TestCommon.Instance.Mocking = false; line) and verify your test still works Check in your test case together with the offline files generated in the mockdata folder Optionally : if your test is creating artifacts in Microsoft 365 it's best to code the cleanup in the test or in the default cleantestenv.ps1 script Important Each checked in test must be checked in with mocking turned on and as such with the appropiate offline test files (the .response files). This is important as it ensures that test cases execute really fast and that tests can be used in build/deploy pipelines. Frequently Asked Questions Do I need to recreate the sites after each live test run? You can opt to recreate the sites each time, but that will be time consuming. It's better to clean the created artifacts before launching a new live test run. The artifacts to clean obviously depend on the written test cases and it's a best practice to keep the cleantestenv.ps1 script up to date with the needed cleaning work. You can tailor this script and save it as cleantestenv.mine.ps1 to add your specific cleanup instructions. How can I configure tests to run live versus the default offline run? By default all the tests run based upon offline data, this is done to enable fast test execution without being dependent on a Microsoft 365 backend to be available and configured for testing. If you however are adding new test cases or refactoring code you might want to run one or more tests in live mode. There are 3 options: Run a single test live To run a single test live you simply need to uncomment the TestCommon.Instance.Mocking = false; line to configure the test to run without using the mocking data, so run live. [TestMethod] public async Task GetSinglePropertyViaRest() { TestCommon.Instance.Mocking = false; using (var context = TestCommon.Instance.GetContext(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests in a test class live To run all tests in a given test class live you can turn off mocking via a test class initialized: [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test TestCommon.Instance.Mocking = false; } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests live In the rare case you want to run all the test cases live you need to change the default setting of the Mocking property from true to false in TestCommon.cs (in the Utilities folder): public bool Mocking { get; set; } = false; Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Can I rename test files or test cases Yes, if naming needs to change you can do that. Keep in mind that the offline files live in a folder named accordingly to the test file and the offline files depend on the test case name, so you'll have to do similar renames in offline files or folder."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "PnP Core SDK - preview | PnP Core SDK",
    "keywords": "PnP Core SDK - preview Intro The PnP Core SDK is an SDK designed to work against Microsoft 365. Its aim is to provide a unified object model to work with the whole Microsoft 365 ecosystem. At the moment the supported workloads are SharePoint Online and Microsoft Teams. Currently the library is an early preview in which the focus is on coding the basics, so that in a next step the actual extending of the library can go smooth. The initial goal for this library will be to cover the needs of developers working with either SharePoint Online or Teams, but obviously we're also open to extend this library further towards other Microsoft 365 workloads such as Mail, Planner, Yammer, etc. Important The PnP Core SDK is in preview: it's targeting developers that want to either test or extend it. It's not yet ready to be used in production scenarios, mainly because it still lacks most of the model definitions, and some functional requirements are still under development. Getting started using this library Using the PnP Core SDK is simple, check out the getting started guide. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . How can you help? The model implemented in the preview only covers a small part of what's possible and what's needed. We're asking the community to help us expand the model by: Extending the model via the creation of new model, complex type and collection classes. Check out the Extending the model article to learn how to do this. Adding \"functionalities\" to the model: after extending the model, the typical CRUD functionality is there, but for some parts of the model it makes sense to add functionalities by adding methods on top of the model classes. Check out the Extending the model article to learn how to do this. Writing sample programs that use this library: since this is a .Net Standard library, it doesn't target Windows only, but also macOS and Linux, as well as mobile OS's like Android and iOS. With the rise of Blazor , this library can also be used to build .Net based apps running in the browser. Samples can be added in the src\\samples folder. Working on documentation : good documentation is critical to help developers work with this library, either by using it or by extending it. See the Writing documentation article for more details. Best practices when contributing This is all new and we're here to help, don't hesitate to reach out with your questions and feedback To avoid overlapping efforts in the startup phase please let us know if you plan to take on a particular chunk of work (e.g. let's say you want to extend the model to support Planner) If you are extending the model and you need to update the model base logic then please reach out, we want to align and agree on those changes first as these need to fit into our model approach Note The best way to reach out is by creating an issue in the issue list: https://github.com/pnp/pnpcore/issues This community rocks, sharing is caring!"
  },
  "index.html": {
    "href": "index.html",
    "title": "PnP Core SDK - preview | PnP Core SDK",
    "keywords": "PnP Core SDK - preview Intro The PnP Core SDK is an SDK designed to work against Microsoft 365. Its aim is to provide a unified object model to work with the whole Microsoft 365 ecosystem. At the moment the supported workloads are SharePoint Online and Microsoft Teams. Currently the library is an early preview in which the focus is on coding the basics, so that in a next step the actual extending of the library can go smooth. The initial goal for this library will be to cover the needs of developers working with either SharePoint Online or Teams, but obviously we're also open to extend this library further towards other Microsoft 365 workloads such as Mail, Planner, Yammer, etc. Important The PnP Core SDK is in preview: it's targeting developers that want to either test or extend it. It's not yet ready to be used in production scenarios, mainly because it still lacks most of the model definitions, and some functional requirements are still under development. Getting started using this library Using the PnP Core SDK is simple, check out out getting started guide. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . How can you help? The model implemented in the preview only covers a small part of what's possible and what's needed. We're asking the community to help us expand the model by: Extending the model via the creation of new model, complex type and collection classes. Check out the Extending the model article to learn how to do this. Adding \"functionalities\" to the model: after extending the model, the typical CRUD functionality is there, but for some parts of the model it makes sense to add functionalities by adding methods on top of the model classes. Check out the Extending the model article to learn how to do this. Writing sample programs that use this library: since this is a .Net Standard library, it doesn't target Windows only, but also macOS and Linux, as well as mobile OS's like Android and iOS. With the rise of Blazor , this library can also be used to build .Net based apps running in the browser. Samples can be added in the src\\samples folder. Working on documentation : good documentation is critical to help developers work with this library, either by using it or by extending it. See the Writing documentation article for more details. Best practices when contributing This is all new and we're here to help, don't hesitate to reach out with your questions and feedback To avoid overlapping efforts in the startup phase please let us know if you plan to take on a particular chunk of work (e.g. let's say you want to extend the model to support Planner) If you are extending the model and you need to update the model base logic then please reach out, we want to align and agree on those changes first as these need to fit into our model approach Note The best way to reach out is by creating an issue in the issue list: https://github.com/pnp/pnpcore/issues This community rocks, sharing is caring!"
  },
  "readme.html": {
    "href": "readme.html",
    "title": "PnP Core SDK documentation | PnP Core SDK",
    "keywords": "PnP Core SDK documentation This folder contains the PnP Core SDK documentation. The documentation system is based upon DocFX and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . Documentation generation The document generation consists of 3 steps outlined below, currently these are manual steps, but we plan to automate them via GitHub Actions: Extract the PnP Core SDK into YML based API documentation: use docfx.exe metadata docfx.json Build the documentation: in this step the YML API documentation and the articles are merged into a documentation site. Use docfx.exe build docfx.json and then check the generated _site folder Copy the generated documentation site to it's hosting location toupdate Note Install the latest DocFX release to get docfx.exe References Setting up the gh-pages branch as an orphaned branch was done using the steps outlined in https://www.gep13.co.uk/blog/how-to-create-gh-pages-branch . To actually work with both \"code\" and \"docs\" branches it's easiest to git clone the repo twice, once for coding and once for publishing documents to the gh-pages branch. Contributing to the documentation We strongly encourage documentation contributions which can be done via improving API documentation (via the triple slash comments in the source code) or creating/updating articles in the articles folder."
  }
}